
Driver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b94  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d40  08000d40  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d40  08000d40  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d40  08000d40  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d44  08000d44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000d68  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000d68  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e8d  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a8c  00000000  00000000  00023ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000007de  00000000  00000000  00024962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00025140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  000252a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002132  00000000  00000000  000253b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a75  00000000  00000000  000274ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008032  00000000  00000000  00029f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031f91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000418  00000000  00000000  00031fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cac 	.word	0x08000cac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000cac 	.word	0x08000cac

08000170 <clock_init>:
#include  "lcd.h"
#include "keypad.h"
#include "7_segmant.h"

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable Init Clock GPIOA
	GPIOA_clock_enable();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	//Enable Init Clock GPIOB
	GPIOB_clock_enable();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <delay_main>:


void delay_main(unsigned int x)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	volatile int i,j;
	for(i=0;i<x;i++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
 80001a4:	e00b      	b.n	80001be <delay_main+0x26>
		for(j=0;j<255;j++);
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
 80001aa:	e002      	b.n	80001b2 <delay_main+0x1a>
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	2bfe      	cmp	r3, #254	; 0xfe
 80001b6:	ddf9      	ble.n	80001ac <delay_main+0x14>
	for(i=0;i<x;i++)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60fb      	str	r3, [r7, #12]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4293      	cmp	r3, r2
 80001c6:	d8ee      	bhi.n	80001a6 <delay_main+0xe>

}
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <main>:

int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b092      	sub	sp, #72	; 0x48
 80001d8:	af00      	add	r7, sp, #0
	clock_init();
 80001da:	f7ff ffc9 	bl	8000170 <clock_init>
	LCD_INIT();
 80001de:	f000 fa33 	bl	8000648 <LCD_INIT>
	LCD_WRITE_STRING("   LCD is READY   ");
 80001e2:	4844      	ldr	r0, [pc, #272]	; (80002f4 <main+0x120>)
 80001e4:	f000 fb3e 	bl	8000864 <LCD_WRITE_STRING>
	delay_main(500);
 80001e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ec:	f7ff ffd4 	bl	8000198 <delay_main>
	LCD_clear_screen();
 80001f0:	f000 fad6 	bl	80007a0 <LCD_clear_screen>

	sev_segmant_init();
 80001f4:	f000 fb64 	bl	80008c0 <sev_segmant_init>
	LCD_WRITE_STRING("SEVEN SEGMANT    is READY");
 80001f8:	483f      	ldr	r0, [pc, #252]	; (80002f8 <main+0x124>)
 80001fa:	f000 fb33 	bl	8000864 <LCD_WRITE_STRING>
	delay_main(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000202:	f7ff ffc9 	bl	8000198 <delay_main>
	LCD_clear_screen();
 8000206:	f000 facb 	bl	80007a0 <LCD_clear_screen>


	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 800020a:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <main+0x128>)
 800020c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000210:	ca07      	ldmia	r2, {r0, r1, r2}
 8000212:	c303      	stmia	r3!, {r0, r1}
 8000214:	801a      	strh	r2, [r3, #0]
 8000216:	3302      	adds	r3, #2
 8000218:	0c12      	lsrs	r2, r2, #16
 800021a:	701a      	strb	r2, [r3, #0]
	unsigned int DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 800021c:	4b38      	ldr	r3, [pc, #224]	; (8000300 <main+0x12c>)
 800021e:	1d3c      	adds	r4, r7, #4
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for (unsigned char i = 0; i < 11; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000238:	e020      	b.n	800027c <main+0xa8>
	{
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 800023a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800023e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000242:	4413      	add	r3, r2
 8000244:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fae9 	bl	8000820 <LCD_WRITE_CHAR>
		MCAL_GPIO_write_port(GPIOB,DISPLAY[i]<<9 ); /* write data on to the LED port */
 800024e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000258:	4413      	add	r3, r2
 800025a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800025e:	b29b      	uxth	r3, r3
 8000260:	025b      	lsls	r3, r3, #9
 8000262:	b29b      	uxth	r3, r3
 8000264:	4619      	mov	r1, r3
 8000266:	4827      	ldr	r0, [pc, #156]	; (8000304 <main+0x130>)
 8000268:	f000 fcd6 	bl	8000c18 <MCAL_GPIO_write_port>

		delay_main(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f7ff ff93 	bl	8000198 <delay_main>
	for (unsigned char i = 0; i < 11; i++)
 8000272:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000276:	3301      	adds	r3, #1
 8000278:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800027c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000280:	2b0a      	cmp	r3, #10
 8000282:	d9da      	bls.n	800023a <main+0x66>

	}
	LCD_clear_screen();
 8000284:	f000 fa8c 	bl	80007a0 <LCD_clear_screen>
	keypad_init();
 8000288:	f000 f86a 	bl	8000360 <keypad_init>
	LCD_WRITE_STRING("    KEYPAD_READY   "   );
 800028c:	481e      	ldr	r0, [pc, #120]	; (8000308 <main+0x134>)
 800028e:	f000 fae9 	bl	8000864 <LCD_WRITE_STRING>
	delay_main(500);
 8000292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000296:	f7ff ff7f 	bl	8000198 <delay_main>
	LCD_clear_screen();
 800029a:	f000 fa81 	bl	80007a0 <LCD_clear_screen>

	int key_press;
	int count=0;
 800029e:	2300      	movs	r3, #0
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
	while(1)
	{

		key_press=	git_char();
 80002a2:	f000 f8c3 	bl	800042c <git_char>
 80002a6:	4603      	mov	r3, r0
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		switch(key_press)
 80002aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002ac:	2b21      	cmp	r3, #33	; 0x21
 80002ae:	d003      	beq.n	80002b8 <main+0xe4>
 80002b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002b2:	2b4e      	cmp	r3, #78	; 0x4e
 80002b4:	d103      	bne.n	80002be <main+0xea>
		{
		case 'N':
			break;
 80002b6:	e01c      	b.n	80002f2 <main+0x11e>
		case '!':
			LCD_clear_screen();
 80002b8:	f000 fa72 	bl	80007a0 <LCD_clear_screen>
			break;
 80002bc:	e019      	b.n	80002f2 <main+0x11e>
		default:
			if(count == 16) // check if cursor reach to the end of line 1
 80002be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002c0:	2b10      	cmp	r3, #16
 80002c2:	d104      	bne.n	80002ce <main+0xfa>
			{
				LCD_GOTO_XY(2,0);
 80002c4:	2100      	movs	r1, #0
 80002c6:	2002      	movs	r0, #2
 80002c8:	f000 f99a 	bl	8000600 <LCD_GOTO_XY>
 80002cc:	e008      	b.n	80002e0 <main+0x10c>
			}
			else if(count == 32)// check if cursor reach to the end of line 2
 80002ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002d0:	2b20      	cmp	r3, #32
 80002d2:	d105      	bne.n	80002e0 <main+0x10c>
			{
				LCD_clear_screen();
 80002d4:	f000 fa64 	bl	80007a0 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
 80002d8:	2100      	movs	r1, #0
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 f990 	bl	8000600 <LCD_GOTO_XY>
			}
			count++;
 80002e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002e2:	3301      	adds	r3, #1
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40


			LCD_WRITE_CHAR(key_press) ;
 80002e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fa98 	bl	8000820 <LCD_WRITE_CHAR>
			break;
 80002f0:	bf00      	nop
		key_press=	git_char();
 80002f2:	e7d6      	b.n	80002a2 <main+0xce>
 80002f4:	08000cc4 	.word	0x08000cc4
 80002f8:	08000cd8 	.word	0x08000cd8
 80002fc:	08000d08 	.word	0x08000d08
 8000300:	08000d14 	.word	0x08000d14
 8000304:	40010c00 	.word	0x40010c00
 8000308:	08000cf4 	.word	0x08000cf4

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 fc93 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff49 	bl	80001d4 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000350:	08000d48 	.word	0x08000d48
  ldr r2, =_sbss
 8000354:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000358:	2000003c 	.word	0x2000003c

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <keypad_init>:
 * @param [in]   -NULL
 * @retval       - NULL
 * Note          - NULL
 * */
 void keypad_init()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
	GPIO_pinconfig_t pinconfig ;

	pinconfig.gpio_pin_number= R0;
 8000366:	2301      	movs	r3, #1
 8000368:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 800036a:	2304      	movs	r3, #4
 800036c:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800036e:	2301      	movs	r3, #1
 8000370:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	482c      	ldr	r0, [pc, #176]	; (8000428 <keypad_init+0xc8>)
 8000378:	f000 fbb8 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= R1;
 800037c:	2302      	movs	r3, #2
 800037e:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000380:	2304      	movs	r3, #4
 8000382:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000384:	2301      	movs	r3, #1
 8000386:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4826      	ldr	r0, [pc, #152]	; (8000428 <keypad_init+0xc8>)
 800038e:	f000 fbad 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= R2;
 8000392:	2308      	movs	r3, #8
 8000394:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000396:	2304      	movs	r3, #4
 8000398:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800039a:	2301      	movs	r3, #1
 800039c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4821      	ldr	r0, [pc, #132]	; (8000428 <keypad_init+0xc8>)
 80003a4:	f000 fba2 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= R3;
 80003a8:	2310      	movs	r3, #16
 80003aa:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80003ac:	2304      	movs	r3, #4
 80003ae:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80003b0:	2301      	movs	r3, #1
 80003b2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	481b      	ldr	r0, [pc, #108]	; (8000428 <keypad_init+0xc8>)
 80003ba:	f000 fb97 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= C0;
 80003be:	2320      	movs	r3, #32
 80003c0:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80003c2:	2304      	movs	r3, #4
 80003c4:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80003c6:	2301      	movs	r3, #1
 80003c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4816      	ldr	r0, [pc, #88]	; (8000428 <keypad_init+0xc8>)
 80003d0:	f000 fb8c 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= C1;
 80003d4:	2340      	movs	r3, #64	; 0x40
 80003d6:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80003d8:	2304      	movs	r3, #4
 80003da:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80003dc:	2301      	movs	r3, #1
 80003de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4810      	ldr	r0, [pc, #64]	; (8000428 <keypad_init+0xc8>)
 80003e6:	f000 fb81 	bl	8000aec <MCAL_GPIO_INIT>
	pinconfig.gpio_pin_number= C2;
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80003ee:	2304      	movs	r3, #4
 80003f0:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80003f2:	2301      	movs	r3, #1
 80003f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <keypad_init+0xc8>)
 80003fc:	f000 fb76 	bl	8000aec <MCAL_GPIO_INIT>

	pinconfig.gpio_pin_number= C3;
 8000400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000404:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000406:	2304      	movs	r3, #4
 8000408:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800040a:	2301      	movs	r3, #1
 800040c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(keypad_port, &pinconfig);
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <keypad_init+0xc8>)
 8000414:	f000 fb6a 	bl	8000aec <MCAL_GPIO_INIT>
	
	MCAL_GPIO_write_port(keypad_port, 0XFF);
 8000418:	21ff      	movs	r1, #255	; 0xff
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <keypad_init+0xc8>)
 800041c:	f000 fbfc 	bl	8000c18 <MCAL_GPIO_write_port>

}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010c00 	.word	0x40010c00

0800042c <git_char>:
  * @param [in]   -NULL
  * @retval       - NULL
  * Note          - NULL
  * */
char git_char()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	for(int i=0 ;i<4;i++)
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	e0b6      	b.n	80005a6 <git_char+0x17a>
	{

		MCAL_GPIO_write_pin(keypad_port, keypad_colom[0], GPIO_pin_set);
 8000438:	4b5f      	ldr	r3, [pc, #380]	; (80005b8 <git_char+0x18c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	b29b      	uxth	r3, r3
 800043e:	2201      	movs	r2, #1
 8000440:	4619      	mov	r1, r3
 8000442:	485e      	ldr	r0, [pc, #376]	; (80005bc <git_char+0x190>)
 8000444:	f000 fbd1 	bl	8000bea <MCAL_GPIO_write_pin>
		MCAL_GPIO_write_pin(keypad_port, keypad_colom[1], GPIO_pin_set);
 8000448:	4b5b      	ldr	r3, [pc, #364]	; (80005b8 <git_char+0x18c>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	b29b      	uxth	r3, r3
 800044e:	2201      	movs	r2, #1
 8000450:	4619      	mov	r1, r3
 8000452:	485a      	ldr	r0, [pc, #360]	; (80005bc <git_char+0x190>)
 8000454:	f000 fbc9 	bl	8000bea <MCAL_GPIO_write_pin>
		MCAL_GPIO_write_pin(keypad_port, keypad_colom[2], GPIO_pin_set);
 8000458:	4b57      	ldr	r3, [pc, #348]	; (80005b8 <git_char+0x18c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	b29b      	uxth	r3, r3
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4856      	ldr	r0, [pc, #344]	; (80005bc <git_char+0x190>)
 8000464:	f000 fbc1 	bl	8000bea <MCAL_GPIO_write_pin>
		MCAL_GPIO_write_pin(keypad_port, keypad_colom[3], GPIO_pin_set);
 8000468:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <git_char+0x18c>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	b29b      	uxth	r3, r3
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	4852      	ldr	r0, [pc, #328]	; (80005bc <git_char+0x190>)
 8000474:	f000 fbb9 	bl	8000bea <MCAL_GPIO_write_pin>
		MCAL_GPIO_write_pin(keypad_port, keypad_colom[i], GPIO_pin_reset);
 8000478:	4a4f      	ldr	r2, [pc, #316]	; (80005b8 <git_char+0x18c>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000480:	b29b      	uxth	r3, r3
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	484d      	ldr	r0, [pc, #308]	; (80005bc <git_char+0x190>)
 8000488:	f000 fbaf 	bl	8000bea <MCAL_GPIO_write_pin>

		for(int j=0 ;j<4;j++)
 800048c:	2300      	movs	r3, #0
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	e082      	b.n	8000598 <git_char+0x16c>
		{
			if(MCAL_GPIO_Read_pin (keypad_port,  keypad_row[j])==0)
 8000492:	4a4b      	ldr	r2, [pc, #300]	; (80005c0 <git_char+0x194>)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049a:	b29b      	uxth	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	4847      	ldr	r0, [pc, #284]	; (80005bc <git_char+0x190>)
 80004a0:	f000 fbc8 	bl	8000c34 <MCAL_GPIO_Read_pin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d16a      	bne.n	8000580 <git_char+0x154>
			{
				while(MCAL_GPIO_Read_pin (keypad_port,  keypad_row[j])==0);
 80004aa:	bf00      	nop
 80004ac:	4a44      	ldr	r2, [pc, #272]	; (80005c0 <git_char+0x194>)
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4840      	ldr	r0, [pc, #256]	; (80005bc <git_char+0x190>)
 80004ba:	f000 fbbb 	bl	8000c34 <MCAL_GPIO_Read_pin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f3      	beq.n	80004ac <git_char+0x80>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d863      	bhi.n	8000592 <git_char+0x166>
 80004ca:	a201      	add	r2, pc, #4	; (adr r2, 80004d0 <git_char+0xa4>)
 80004cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d0:	080004e1 	.word	0x080004e1
 80004d4:	08000509 	.word	0x08000509
 80004d8:	08000531 	.word	0x08000531
 80004dc:	08000559 	.word	0x08000559
				switch(i)
				{
				case(0):
	{
					if(j==0) return '7';
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <git_char+0xbe>
 80004e6:	2337      	movs	r3, #55	; 0x37
 80004e8:	e062      	b.n	80005b0 <git_char+0x184>
					else if(j==1)return '4';
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d101      	bne.n	80004f4 <git_char+0xc8>
 80004f0:	2334      	movs	r3, #52	; 0x34
 80004f2:	e05d      	b.n	80005b0 <git_char+0x184>
					else if(j==2)return '1';
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d101      	bne.n	80004fe <git_char+0xd2>
 80004fa:	2331      	movs	r3, #49	; 0x31
 80004fc:	e058      	b.n	80005b0 <git_char+0x184>
					else if(j==3)return '!';
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d13f      	bne.n	8000584 <git_char+0x158>
 8000504:	2321      	movs	r3, #33	; 0x21
 8000506:	e053      	b.n	80005b0 <git_char+0x184>
					break;
	}
				case(1):
	{
					if(j==0)return '8';
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <git_char+0xe6>
 800050e:	2338      	movs	r3, #56	; 0x38
 8000510:	e04e      	b.n	80005b0 <git_char+0x184>
					else if(j==1)return '5';
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d101      	bne.n	800051c <git_char+0xf0>
 8000518:	2335      	movs	r3, #53	; 0x35
 800051a:	e049      	b.n	80005b0 <git_char+0x184>
					else if(j==2)return '2';
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d101      	bne.n	8000526 <git_char+0xfa>
 8000522:	2332      	movs	r3, #50	; 0x32
 8000524:	e044      	b.n	80005b0 <git_char+0x184>
					else if(j==3)return '0';
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d12d      	bne.n	8000588 <git_char+0x15c>
 800052c:	2330      	movs	r3, #48	; 0x30
 800052e:	e03f      	b.n	80005b0 <git_char+0x184>
					break;
	}
				case(2):
	{
					if(j==0)return '9';
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d101      	bne.n	800053a <git_char+0x10e>
 8000536:	2339      	movs	r3, #57	; 0x39
 8000538:	e03a      	b.n	80005b0 <git_char+0x184>
					else if(j==1)return '6';
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d101      	bne.n	8000544 <git_char+0x118>
 8000540:	2336      	movs	r3, #54	; 0x36
 8000542:	e035      	b.n	80005b0 <git_char+0x184>
					else if(j==2)return '3';
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d101      	bne.n	800054e <git_char+0x122>
 800054a:	2333      	movs	r3, #51	; 0x33
 800054c:	e030      	b.n	80005b0 <git_char+0x184>
					else if(j==3)return '=';
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d11b      	bne.n	800058c <git_char+0x160>
 8000554:	233d      	movs	r3, #61	; 0x3d
 8000556:	e02b      	b.n	80005b0 <git_char+0x184>
					break;
	}
				case(3):
	{
					if(j==0)return '/';
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d101      	bne.n	8000562 <git_char+0x136>
 800055e:	232f      	movs	r3, #47	; 0x2f
 8000560:	e026      	b.n	80005b0 <git_char+0x184>
					else if(j==1)return '*';
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d101      	bne.n	800056c <git_char+0x140>
 8000568:	232a      	movs	r3, #42	; 0x2a
 800056a:	e021      	b.n	80005b0 <git_char+0x184>
					else if(j==2)return '-';
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d101      	bne.n	8000576 <git_char+0x14a>
 8000572:	232d      	movs	r3, #45	; 0x2d
 8000574:	e01c      	b.n	80005b0 <git_char+0x184>
					else if(j==3)return '+';
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d109      	bne.n	8000590 <git_char+0x164>
 800057c:	232b      	movs	r3, #43	; 0x2b
 800057e:	e017      	b.n	80005b0 <git_char+0x184>
					break;
	}

				}
			}
 8000580:	bf00      	nop
 8000582:	e006      	b.n	8000592 <git_char+0x166>
					break;
 8000584:	bf00      	nop
 8000586:	e004      	b.n	8000592 <git_char+0x166>
					break;
 8000588:	bf00      	nop
 800058a:	e002      	b.n	8000592 <git_char+0x166>
					break;
 800058c:	bf00      	nop
 800058e:	e000      	b.n	8000592 <git_char+0x166>
					break;
 8000590:	bf00      	nop
		for(int j=0 ;j<4;j++)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b03      	cmp	r3, #3
 800059c:	f77f af79 	ble.w	8000492 <git_char+0x66>
	for(int i=0 ;i<4;i++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	f77f af45 	ble.w	8000438 <git_char+0xc>

		}

	}
	return 'N';
 80005ae:	234e      	movs	r3, #78	; 0x4e
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000010 	.word	0x20000010
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	20000000 	.word	0x20000000

080005c4 <delay_LCD>:
 * @param [in]  -delay/ the time of the delay
 * @retval      - null
 * Note         - null
 * */
void delay_LCD(unsigned int delay)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	volatile int i,j;
	for(i=0;i<delay;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e00b      	b.n	80005ea <delay_LCD+0x26>
		for(j=0;j<255;j++);
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	e002      	b.n	80005de <delay_LCD+0x1a>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3301      	adds	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2bfe      	cmp	r3, #254	; 0xfe
 80005e2:	ddf9      	ble.n	80005d8 <delay_LCD+0x14>
	for(i=0;i<delay;i++)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	461a      	mov	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d8ee      	bhi.n	80005d2 <delay_LCD+0xe>

}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <LCD_GOTO_XY>:
 * @param [in]           - line: the line number   <<< 1 or 2>>>
 * @param [in]           - position : the cursor position in the LCD  <<<1 --- 16>>>
 * @retval               - null
 * Note                  - that valled for LCD 2*16 only
 * */
void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d108      	bne.n	8000628 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d805      	bhi.n	8000628 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	3b80      	subs	r3, #128	; 0x80
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8da 	bl	80007dc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d108      	bne.n	8000640 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d805      	bhi.n	8000640 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	3b40      	subs	r3, #64	; 0x40
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8ce 	bl	80007dc <LCD_WRITE_COMMAND>
		}
	}
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <LCD_INIT>:
 * @param [in]           -NULL
 * @retval               -NULL
 * Note                  -NULL
 * */
void LCD_INIT()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	delay_LCD(20);
 800064e:	2014      	movs	r0, #20
 8000650:	f7ff ffb8 	bl	80005c4 <delay_LCD>
	GPIO_pinconfig_t  pincfg;

	//-------------------------------------------------------------------------------------------
	// the data pins
	pincfg.gpio_pin_number =GPIO_PIN_0;
 8000654:	2301      	movs	r3, #1
 8000656:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000658:	2304      	movs	r3, #4
 800065a:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800065c:	2301      	movs	r3, #1
 800065e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	484d      	ldr	r0, [pc, #308]	; (800079c <LCD_INIT+0x154>)
 8000666:	f000 fa41 	bl	8000aec <MCAL_GPIO_INIT>

	pincfg.gpio_pin_number =GPIO_PIN_1;
 800066a:	2302      	movs	r3, #2
 800066c:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 800066e:	2304      	movs	r3, #4
 8000670:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4848      	ldr	r0, [pc, #288]	; (800079c <LCD_INIT+0x154>)
 800067c:	f000 fa36 	bl	8000aec <MCAL_GPIO_INIT>


	pincfg.gpio_pin_number =GPIO_PIN_2;
 8000680:	2304      	movs	r3, #4
 8000682:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000684:	2304      	movs	r3, #4
 8000686:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000688:	2301      	movs	r3, #1
 800068a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4842      	ldr	r0, [pc, #264]	; (800079c <LCD_INIT+0x154>)
 8000692:	f000 fa2b 	bl	8000aec <MCAL_GPIO_INIT>


	pincfg.gpio_pin_number =GPIO_PIN_3;
 8000696:	2308      	movs	r3, #8
 8000698:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 800069a:	2304      	movs	r3, #4
 800069c:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	483d      	ldr	r0, [pc, #244]	; (800079c <LCD_INIT+0x154>)
 80006a8:	f000 fa20 	bl	8000aec <MCAL_GPIO_INIT>

	pincfg.gpio_pin_number =GPIO_PIN_4;
 80006ac:	2310      	movs	r3, #16
 80006ae:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80006b0:	2304      	movs	r3, #4
 80006b2:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80006b4:	2301      	movs	r3, #1
 80006b6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4837      	ldr	r0, [pc, #220]	; (800079c <LCD_INIT+0x154>)
 80006be:	f000 fa15 	bl	8000aec <MCAL_GPIO_INIT>

	pincfg.gpio_pin_number =GPIO_PIN_5;
 80006c2:	2320      	movs	r3, #32
 80006c4:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80006c6:	2304      	movs	r3, #4
 80006c8:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80006ca:	2301      	movs	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4832      	ldr	r0, [pc, #200]	; (800079c <LCD_INIT+0x154>)
 80006d4:	f000 fa0a 	bl	8000aec <MCAL_GPIO_INIT>

	pincfg.gpio_pin_number =GPIO_PIN_6;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80006dc:	2304      	movs	r3, #4
 80006de:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80006e0:	2301      	movs	r3, #1
 80006e2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	482c      	ldr	r0, [pc, #176]	; (800079c <LCD_INIT+0x154>)
 80006ea:	f000 f9ff 	bl	8000aec <MCAL_GPIO_INIT>

	pincfg.gpio_pin_number =GPIO_PIN_7;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 80006f2:	2304      	movs	r3, #4
 80006f4:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80006f6:	2301      	movs	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4827      	ldr	r0, [pc, #156]	; (800079c <LCD_INIT+0x154>)
 8000700:	f000 f9f4 	bl	8000aec <MCAL_GPIO_INIT>
//--------------------------------------------------------------------------------------------
	//	RS_SWITCH input floating
	pincfg.gpio_pin_number =RS_SWITCH;
 8000704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000708:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 800070a:	2304      	movs	r3, #4
 800070c:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4821      	ldr	r0, [pc, #132]	; (800079c <LCD_INIT+0x154>)
 8000718:	f000 f9e8 	bl	8000aec <MCAL_GPIO_INIT>

	//	RW_SWITCH input floating
	pincfg.gpio_pin_number =RW_SWITCH;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 8000722:	2304      	movs	r3, #4
 8000724:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000726:	2301      	movs	r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	481b      	ldr	r0, [pc, #108]	; (800079c <LCD_INIT+0x154>)
 8000730:	f000 f9dc 	bl	8000aec <MCAL_GPIO_INIT>

	//	ENABLE_SWITCH  input floating
	pincfg.gpio_pin_number =ENABLE_SWITCH ;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP ;
 800073a:	2304      	movs	r3, #4
 800073c:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(LCD_PORT, &pincfg);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4815      	ldr	r0, [pc, #84]	; (800079c <LCD_INIT+0x154>)
 8000748:	f000 f9d0 	bl	8000aec <MCAL_GPIO_INIT>





	MCAL_GPIO_write_pin(LCD_CTRL, ENABLE_SWITCH, GPIO_pin_reset);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <LCD_INIT+0x154>)
 8000754:	f000 fa49 	bl	8000bea <MCAL_GPIO_write_pin>
	MCAL_GPIO_write_pin(LCD_CTRL, RS_SWITCH, GPIO_pin_reset);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	480f      	ldr	r0, [pc, #60]	; (800079c <LCD_INIT+0x154>)
 8000760:	f000 fa43 	bl	8000bea <MCAL_GPIO_write_pin>
	MCAL_GPIO_write_pin(LCD_CTRL, RW_SWITCH, GPIO_pin_reset);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <LCD_INIT+0x154>)
 800076c:	f000 fa3d 	bl	8000bea <MCAL_GPIO_write_pin>

	delay_LCD(15);
 8000770:	200f      	movs	r0, #15
 8000772:	f7ff ff27 	bl	80005c4 <delay_LCD>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000776:	2038      	movs	r0, #56	; 0x38
 8000778:	f000 f830 	bl	80007dc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800077c:	2006      	movs	r0, #6
 800077e:	f000 f82d 	bl	80007dc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000782:	2080      	movs	r0, #128	; 0x80
 8000784:	f000 f82a 	bl	80007dc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000788:	200f      	movs	r0, #15
 800078a:	f000 f827 	bl	80007dc <LCD_WRITE_COMMAND>
	LCD_clear_screen();
 800078e:	f000 f807 	bl	80007a0 <LCD_clear_screen>





}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40010800 	.word	0x40010800

080007a0 <LCD_clear_screen>:
 * @brief                - clear the screen and start from line 0 posation 0
 * @param [in]           -NULL
 * @retval               -NULL
 * Note                  -NULL
 * */
void LCD_clear_screen(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND( LCD_CLEAR_SCREEN);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 f819 	bl	80007dc <LCD_WRITE_COMMAND>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <LCD_lcd_kick>:
 * @brief                - set and then reset the  ENABLE_SWITCH
 * @param [in]           -NULL
 * @retval               -NULL
 * Note                  -NULL
 * */
void LCD_lcd_kick(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	MCAL_GPIO_write_pin(LCD_CTRL, ENABLE_SWITCH , GPIO_pin_set);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LCD_lcd_kick+0x28>)
 80007bc:	f000 fa15 	bl	8000bea <MCAL_GPIO_write_pin>
	delay_LCD(50);
 80007c0:	2032      	movs	r0, #50	; 0x32
 80007c2:	f7ff feff 	bl	80005c4 <delay_LCD>
	MCAL_GPIO_write_pin(LCD_CTRL, ENABLE_SWITCH , GPIO_pin_reset);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <LCD_lcd_kick+0x28>)
 80007ce:	f000 fa0c 	bl	8000bea <MCAL_GPIO_write_pin>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010800 	.word	0x40010800

080007dc <LCD_WRITE_COMMAND>:
 * @brief                - write command to the port
 * @param [in]           -command the command than need to write
 * @retval               -NULL
 * Note                  - that code for 8 bit mode
 * */
void LCD_WRITE_COMMAND(unsigned char command){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]



	//LCD_check_lcd_isbusy();
	MCAL_GPIO_write_port(LCD_PORT , command);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <LCD_WRITE_COMMAND+0x40>)
 80007ee:	f000 fa13 	bl	8000c18 <MCAL_GPIO_write_port>
	MCAL_GPIO_write_pin(LCD_PORT, RS_SWITCH, GPIO_pin_reset);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <LCD_WRITE_COMMAND+0x40>)
 80007fa:	f000 f9f6 	bl	8000bea <MCAL_GPIO_write_pin>
	MCAL_GPIO_write_pin(LCD_PORT, RW_SWITCH, GPIO_pin_reset);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <LCD_WRITE_COMMAND+0x40>)
 8000806:	f000 f9f0 	bl	8000bea <MCAL_GPIO_write_pin>
	delay_LCD(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff feda 	bl	80005c4 <delay_LCD>
	LCD_lcd_kick();
 8000810:	f7ff ffce 	bl	80007b0 <LCD_lcd_kick>
	//	LCD_lcd_kick ();
	//	MCAL_GPIO_write_port(LCD_PORT & 0x0F, command << 4);
	//	delay_LCD(1);
	//	LCD_lcd_kick();
	//	//#endif
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010800 	.word	0x40010800

08000820 <LCD_WRITE_CHAR>:
 * @brief                - write char to the port
 * @param [in]           -character the character than need to write
 * @retval               -NULL
 * Note                  - that code for 8 bit mode
 * */
void LCD_WRITE_CHAR(unsigned char character){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_write_port(LCD_PORT, character);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	b29b      	uxth	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <LCD_WRITE_CHAR+0x40>)
 8000832:	f000 f9f1 	bl	8000c18 <MCAL_GPIO_write_port>
	MCAL_GPIO_write_pin(LCD_PORT, RW_SWITCH, GPIO_pin_reset);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <LCD_WRITE_CHAR+0x40>)
 800083e:	f000 f9d4 	bl	8000bea <MCAL_GPIO_write_pin>
	MCAL_GPIO_write_pin(LCD_PORT, RS_SWITCH, GPIO_pin_set);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <LCD_WRITE_CHAR+0x40>)
 800084a:	f000 f9ce 	bl	8000bea <MCAL_GPIO_write_pin>
	delay_LCD(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff feb8 	bl	80005c4 <delay_LCD>
	LCD_lcd_kick();
 8000854:	f7ff ffac 	bl	80007b0 <LCD_lcd_kick>
	//	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	//	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	//	delay_LCD(1);
	//	LCD_lcd_kick ();
	//#endif
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40010800 	.word	0x40010800

08000864 <LCD_WRITE_STRING>:
 * @brief                - write string  to the port
 * @param [in]           -string the string than need to write
 * @retval               -NULL
 * Note                  - that code for 8 bit mode
 * */
void LCD_WRITE_STRING(char* string){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000870:	e01c      	b.n	80008ac <LCD_WRITE_STRING+0x48>
		count++;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffcd 	bl	8000820 <LCD_WRITE_CHAR>
		if (count == 16)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b10      	cmp	r3, #16
 800088a:	d104      	bne.n	8000896 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 800088c:	2100      	movs	r1, #0
 800088e:	2002      	movs	r0, #2
 8000890:	f7ff feb6 	bl	8000600 <LCD_GOTO_XY>
 8000894:	e00a      	b.n	80008ac <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b20      	cmp	r3, #32
 800089a:	d107      	bne.n	80008ac <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 800089c:	f7ff ff80 	bl	80007a0 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff feac 	bl	8000600 <LCD_GOTO_XY>
			count = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1de      	bne.n	8000872 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <sev_segmant_init>:
 * @param [in]  -NULL
 * @retval      - null
 * Note         - null
 * */
void sev_segmant_init()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
GPIO_pinconfig_t pincongif;
pincongif.gpio_pin_number=sev_pin0;
 80008c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ca:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80008cc:	2304      	movs	r3, #4
 80008ce:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80008d0:	2301      	movs	r3, #1
 80008d2:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4827      	ldr	r0, [pc, #156]	; (8000978 <sev_segmant_init+0xb8>)
 80008da:	f000 f907 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin1;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80008e4:	2304      	movs	r3, #4
 80008e6:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 80008e8:	2301      	movs	r3, #1
 80008ea:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <sev_segmant_init+0xb8>)
 80008f2:	f000 f8fb 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin2;
 80008f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008fa:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80008fc:	2304      	movs	r3, #4
 80008fe:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000900:	2301      	movs	r3, #1
 8000902:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	481b      	ldr	r0, [pc, #108]	; (8000978 <sev_segmant_init+0xb8>)
 800090a:	f000 f8ef 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin3;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000914:	2304      	movs	r3, #4
 8000916:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000918:	2301      	movs	r3, #1
 800091a:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4815      	ldr	r0, [pc, #84]	; (8000978 <sev_segmant_init+0xb8>)
 8000922:	f000 f8e3 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin4;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800092c:	2304      	movs	r3, #4
 800092e:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000930:	2301      	movs	r3, #1
 8000932:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	480f      	ldr	r0, [pc, #60]	; (8000978 <sev_segmant_init+0xb8>)
 800093a:	f000 f8d7 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin5;
 800093e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000942:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000944:	2304      	movs	r3, #4
 8000946:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000948:	2301      	movs	r3, #1
 800094a:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <sev_segmant_init+0xb8>)
 8000952:	f000 f8cb 	bl	8000aec <MCAL_GPIO_INIT>

pincongif.gpio_pin_number=sev_pin6;
 8000956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095a:	80bb      	strh	r3, [r7, #4]
pincongif.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800095c:	2304      	movs	r3, #4
 800095e:	71bb      	strb	r3, [r7, #6]
pincongif.GPIO_OUTPUT_SPEED=GPIO_SPEED_10MHZ;
 8000960:	2301      	movs	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
MCAL_GPIO_INIT(sev_port, &pincongif);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <sev_segmant_init+0xb8>)
 800096a:	f000 f8bf 	bl	8000aec <MCAL_GPIO_INIT>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010c00 	.word	0x40010c00

0800097c <git_pin_posation>:
 *  Created on: Jul 31, 2023
 *      Author: Ahmed shaban mohamed
 */
#include "stm32f103c6_ gpio_drivers.h"
uint8_t git_pin_posation( uint16_t gpio_pin_number)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	switch(gpio_pin_number)
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800098c:	f000 80a5 	beq.w	8000ada <git_pin_posation+0x15e>
 8000990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000994:	f300 80a3 	bgt.w	8000ade <git_pin_posation+0x162>
 8000998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800099c:	f000 809b 	beq.w	8000ad6 <git_pin_posation+0x15a>
 80009a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009a4:	f300 809b 	bgt.w	8000ade <git_pin_posation+0x162>
 80009a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ac:	f000 8091 	beq.w	8000ad2 <git_pin_posation+0x156>
 80009b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b4:	f300 8093 	bgt.w	8000ade <git_pin_posation+0x162>
 80009b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009bc:	f000 8087 	beq.w	8000ace <git_pin_posation+0x152>
 80009c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009c4:	f300 808b 	bgt.w	8000ade <git_pin_posation+0x162>
 80009c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009cc:	d07d      	beq.n	8000aca <git_pin_posation+0x14e>
 80009ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d2:	f300 8084 	bgt.w	8000ade <git_pin_posation+0x162>
 80009d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009da:	d074      	beq.n	8000ac6 <git_pin_posation+0x14a>
 80009dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009e0:	dc7d      	bgt.n	8000ade <git_pin_posation+0x162>
 80009e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e6:	d06c      	beq.n	8000ac2 <git_pin_posation+0x146>
 80009e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ec:	dc77      	bgt.n	8000ade <git_pin_posation+0x162>
 80009ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f2:	d064      	beq.n	8000abe <git_pin_posation+0x142>
 80009f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f8:	dc71      	bgt.n	8000ade <git_pin_posation+0x162>
 80009fa:	2b80      	cmp	r3, #128	; 0x80
 80009fc:	d05d      	beq.n	8000aba <git_pin_posation+0x13e>
 80009fe:	2b80      	cmp	r3, #128	; 0x80
 8000a00:	dc6d      	bgt.n	8000ade <git_pin_posation+0x162>
 8000a02:	2b20      	cmp	r3, #32
 8000a04:	dc48      	bgt.n	8000a98 <git_pin_posation+0x11c>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	dd69      	ble.n	8000ade <git_pin_posation+0x162>
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	2b1f      	cmp	r3, #31
 8000a0e:	d866      	bhi.n	8000ade <git_pin_posation+0x162>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <git_pin_posation+0x9c>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000aa3 	.word	0x08000aa3
 8000a20:	08000adf 	.word	0x08000adf
 8000a24:	08000aa7 	.word	0x08000aa7
 8000a28:	08000adf 	.word	0x08000adf
 8000a2c:	08000adf 	.word	0x08000adf
 8000a30:	08000adf 	.word	0x08000adf
 8000a34:	08000aab 	.word	0x08000aab
 8000a38:	08000adf 	.word	0x08000adf
 8000a3c:	08000adf 	.word	0x08000adf
 8000a40:	08000adf 	.word	0x08000adf
 8000a44:	08000adf 	.word	0x08000adf
 8000a48:	08000adf 	.word	0x08000adf
 8000a4c:	08000adf 	.word	0x08000adf
 8000a50:	08000adf 	.word	0x08000adf
 8000a54:	08000aaf 	.word	0x08000aaf
 8000a58:	08000adf 	.word	0x08000adf
 8000a5c:	08000adf 	.word	0x08000adf
 8000a60:	08000adf 	.word	0x08000adf
 8000a64:	08000adf 	.word	0x08000adf
 8000a68:	08000adf 	.word	0x08000adf
 8000a6c:	08000adf 	.word	0x08000adf
 8000a70:	08000adf 	.word	0x08000adf
 8000a74:	08000adf 	.word	0x08000adf
 8000a78:	08000adf 	.word	0x08000adf
 8000a7c:	08000adf 	.word	0x08000adf
 8000a80:	08000adf 	.word	0x08000adf
 8000a84:	08000adf 	.word	0x08000adf
 8000a88:	08000adf 	.word	0x08000adf
 8000a8c:	08000adf 	.word	0x08000adf
 8000a90:	08000adf 	.word	0x08000adf
 8000a94:	08000ab3 	.word	0x08000ab3
 8000a98:	2b40      	cmp	r3, #64	; 0x40
 8000a9a:	d00c      	beq.n	8000ab6 <git_pin_posation+0x13a>

	case GPIO_PIN_15 :
		return 28;
		break;
	default :
		break ;
 8000a9c:	e01f      	b.n	8000ade <git_pin_posation+0x162>
		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e01f      	b.n	8000ae2 <git_pin_posation+0x166>
		return 4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	e01d      	b.n	8000ae2 <git_pin_posation+0x166>
		return 8;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	e01b      	b.n	8000ae2 <git_pin_posation+0x166>
		return 12;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	e019      	b.n	8000ae2 <git_pin_posation+0x166>
		return 16;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	e017      	b.n	8000ae2 <git_pin_posation+0x166>
		return 20;
 8000ab2:	2314      	movs	r3, #20
 8000ab4:	e015      	b.n	8000ae2 <git_pin_posation+0x166>
		return 24;
 8000ab6:	2318      	movs	r3, #24
 8000ab8:	e013      	b.n	8000ae2 <git_pin_posation+0x166>
		return 28;
 8000aba:	231c      	movs	r3, #28
 8000abc:	e011      	b.n	8000ae2 <git_pin_posation+0x166>
		return 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e00f      	b.n	8000ae2 <git_pin_posation+0x166>
		return 4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e00d      	b.n	8000ae2 <git_pin_posation+0x166>
		return 8;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00b      	b.n	8000ae2 <git_pin_posation+0x166>
		return 12;
 8000aca:	230c      	movs	r3, #12
 8000acc:	e009      	b.n	8000ae2 <git_pin_posation+0x166>
		return 16;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	e007      	b.n	8000ae2 <git_pin_posation+0x166>
		return 20;
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	e005      	b.n	8000ae2 <git_pin_posation+0x166>
		return 24;
 8000ad6:	2318      	movs	r3, #24
 8000ad8:	e003      	b.n	8000ae2 <git_pin_posation+0x166>
		return 28;
 8000ada:	231c      	movs	r3, #28
 8000adc:	e001      	b.n	8000ae2 <git_pin_posation+0x166>
		break ;
 8000ade:	bf00      	nop

	}
	return 0;
 8000ae0:	2300      	movs	r3, #0

}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <MCAL_GPIO_INIT>:
 * @retval               - null
 * Note                  -in STM32F103c6 mcu has gpio port A B C D but LQFP48 package hava only A and B and part OF C and  D
 */

void MCAL_GPIO_INIT(GPIO_typedef *GPIOX ,GPIO_pinconfig_t *pinconfig)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	//port configur register low (GPIO_CRL) configure  pins from 0 ti 7
	//port configur register high (GPIO_CRH) configure  pins from 8 ti 15
	volatile uint32_t *configregister =NULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
	uint8_t config=0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
	configregister=(pinconfig->gpio_pin_number<GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH  ;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	d801      	bhi.n	8000b0a <MCAL_GPIO_INIT+0x1e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <MCAL_GPIO_INIT+0x22>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0] and  	M0DE y[1:0]
	(*configregister) &= ~(0xf<<git_pin_posation(pinconfig->gpio_pin_number));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff31 	bl	800097c <git_pin_posation>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	230f      	movs	r3, #15
 8000b20:	4093      	lsls	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	601a      	str	r2, [r3, #0]
	// if pin is output
	if(  (pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD) ||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP)||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP ))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d00b      	beq.n	8000b4e <MCAL_GPIO_INIT+0x62>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d007      	beq.n	8000b4e <MCAL_GPIO_INIT+0x62>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d003      	beq.n	8000b4e <MCAL_GPIO_INIT+0x62>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d10e      	bne.n	8000b6c <MCAL_GPIO_INIT+0x80>
	{
		//set CNFy[1:0] and M0DE y[1:0]
		config=((((pinconfig->GPIO_MODE -4)<<2)|(pinconfig->GPIO_OUTPUT_SPEED))&0X0f) ;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	3b04      	subs	r3, #4
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	78db      	ldrb	r3, [r3, #3]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 030f 	and.w	r3, r3, #15
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e02c      	b.n	8000bc6 <MCAL_GPIO_INIT+0xda>
		//(*configregister)|=((config)<<git_pin_posation(pinconfig->gpio_pin_number));

	}
	else
	{
		if(  (pinconfig->GPIO_MODE==GPIO_MODE_INPUT_FLO) ||(pinconfig->GPIO_MODE==GPIO_MODE_Analog))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d003      	beq.n	8000b7c <MCAL_GPIO_INIT+0x90>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d107      	bne.n	8000b8c <MCAL_GPIO_INIT+0xa0>
		{
			//set CNFy[1:0] and M0DE y[1:0]
			config=((((pinconfig->GPIO_MODE )<<2)| 0X0) & 0X0F) ;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	789b      	ldrb	r3, [r3, #2]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e01c      	b.n	8000bc6 <MCAL_GPIO_INIT+0xda>
			//	(*configregister)|=((config)<<git_pin_posation(pinconfig->gpio_pin_number));

		}
		else if  (pinconfig->GPIO_MODE==GPIO_MODE_INPUT_AF )
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d102      	bne.n	8000b9a <MCAL_GPIO_INIT+0xae>
		{
			config=(((GPIO_MODE_INPUT_AF<<2)|0x0)&0x0f);
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e015      	b.n	8000bc6 <MCAL_GPIO_INIT+0xda>
			//(*configregister)|=((config)<<git_pin_posation(pinconfig->gpio_pin_number));

		}
		else
		{
			config=((((GPIO_MODE_INPUT_PU)<<2)|0x0)&0x0f);
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d107      	bne.n	8000bb6 <MCAL_GPIO_INIT+0xca>
			{
				GPIOX->ODR |= pinconfig->gpio_pin_number;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e007      	b.n	8000bc6 <MCAL_GPIO_INIT+0xda>
			}
			else
			{
				GPIOX->ODR &=~( pinconfig->gpio_pin_number);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	43d2      	mvns	r2, r2
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60da      	str	r2, [r3, #12]

			}
		}
	}
	//write or read to CL or CRH
	(*configregister)|=((config)<<git_pin_posation(pinconfig->gpio_pin_number));
 8000bc6:	7bfc      	ldrb	r4, [r7, #15]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fed5 	bl	800097c <git_pin_posation>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	fa04 f203 	lsl.w	r2, r4, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <MCAL_GPIO_write_pin>:
 * @retval               - null
 * Note                  - null
 * */

void MCAL_GPIO_write_pin(GPIO_typedef *GPIOX ,  uint16_t gpio_pin_number ,  uint16_t value)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	803b      	strh	r3, [r7, #0]
	if(value!=GPIO_pin_reset)
 8000bfa:	883b      	ldrh	r3, [r7, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <MCAL_GPIO_write_pin+0x1e>
	{
		GPIOX->BSRR=(uint32_t)gpio_pin_number;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
	//	Note: If both BSx and BRx are set, BSx has priority.
	//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	//	These bits are write-only and can be accessed in Word mode only.
	//	0: No action on the corresponding ODRx bit
	//	1: Set the corresponding ODRx bit
}
 8000c06:	e002      	b.n	8000c0e <MCAL_GPIO_write_pin+0x24>
		GPIOX->BRR=(uint32_t)gpio_pin_number;
 8000c08:	887a      	ldrh	r2, [r7, #2]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	615a      	str	r2, [r3, #20]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <MCAL_GPIO_write_port>:
 *                       -value  pin  value that use to raad to the pin   @ ref GPIO_PIN_stata
 * @retval               - null
 * Note                  - null
 * */
void MCAL_GPIO_write_port(GPIO_typedef *GPIOX,uint16_t value)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR=(uint32_t)value;
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60da      	str	r2, [r3, #12]

}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <MCAL_GPIO_Read_pin>:
 *@param [in]            -gpio_pin_number specifies the port bit to read  set by @ ref GPIO_PIN_defin
 * @retval               - the input pin value
 * Note                  - null
 * */
uint8_t MCAL_GPIO_Read_pin(GPIO_typedef *GPIOX,uint16_t gpio_pin_number)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	uint8_t pin_status;
	if(((GPIOX->IDR) & gpio_pin_number)!=(uint8_t) GPIO_pin_reset)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <MCAL_GPIO_Read_pin+0x1e>
	{
		pin_status =GPIO_pin_set;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e001      	b.n	8000c56 <MCAL_GPIO_Read_pin+0x22>
	}
	else
	{
		pin_status =GPIO_pin_reset;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	}
	return  pin_status;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2600      	movs	r6, #0
 8000c68:	4d0c      	ldr	r5, [pc, #48]	; (8000c9c <__libc_init_array+0x38>)
 8000c6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ca0 <__libc_init_array+0x3c>)
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	f000 f81a 	bl	8000cac <_init>
 8000c78:	2600      	movs	r6, #0
 8000c7a:	4d0a      	ldr	r5, [pc, #40]	; (8000ca4 <__libc_init_array+0x40>)
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <__libc_init_array+0x44>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08000d40 	.word	0x08000d40
 8000ca0:	08000d40 	.word	0x08000d40
 8000ca4:	08000d40 	.word	0x08000d40
 8000ca8:	08000d44 	.word	0x08000d44

08000cac <_init>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	bf00      	nop
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr

08000cb8 <_fini>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr
