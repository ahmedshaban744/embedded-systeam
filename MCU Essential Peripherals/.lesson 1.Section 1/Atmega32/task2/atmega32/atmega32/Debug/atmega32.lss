
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000251  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DDRC   (*(volatile unsigned char*)0x34)
#define PINC   (*(volatile unsigned char*)0x33)
#define F_CPU 8000000UL
int main(void)
{
	 DDRA=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
      clear_bit(DDRC,0);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	84 bb       	out	0x14, r24	; 20
      set_bit(PORTC,0) ;
  76:	85 b3       	in	r24, 0x15	; 21
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
    unsigned int flag=0;
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
    while (1) 
    {   
		if(read_bit(PINC,0)==0)
  80:	98 99       	sbic	0x13, 0	; 19
  82:	21 c0       	rjmp	.+66     	; 0xc6 <main+0x5a>
		{
				set_bit(PORTA,flag);
  84:	6b b3       	in	r22, 0x1b	; 27
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	9c 01       	movw	r18, r24
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	26 2b       	or	r18, r22
  9a:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e1       	ldi	r18, 0x1F	; 31
  9e:	31 ea       	ldi	r19, 0xA1	; 161
  a0:	67 e0       	ldi	r22, 0x07	; 7
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	60 40       	sbci	r22, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
				_delay_ms(2500);
				clear_bit(PORTA,flag-1)	;
  ae:	2b b3       	in	r18, 0x1b	; 27
  b0:	ba 01       	movw	r22, r20
  b2:	61 50       	subi	r22, 0x01	; 1
  b4:	71 09       	sbc	r23, r1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x4c>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	8b bb       	out	0x1b, r24	; 27
		}
		if(read_bit(PINC,0)==1)
  c6:	98 9b       	sbis	0x13, 0	; 19
  c8:	db cf       	rjmp	.-74     	; 0x80 <main+0x14>
		{
		flag++;
  ca:	ba 01       	movw	r22, r20
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
		set_bit(PORTA,flag);
  d0:	5b b3       	in	r21, 0x1b	; 27
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	9c 01       	movw	r18, r24
  d8:	06 2e       	mov	r0, r22
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x70>
  e4:	25 2b       	or	r18, r21
  e6:	2b bb       	out	0x1b, r18	; 27
  e8:	ef e1       	ldi	r30, 0x1F	; 31
  ea:	21 ea       	ldi	r18, 0xA1	; 161
  ec:	37 e0       	ldi	r19, 0x07	; 7
  ee:	e1 50       	subi	r30, 0x01	; 1
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x82>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
		_delay_ms(2500);
			clear_bit(PORTA,flag-1)	;	
  fa:	2b b3       	in	r18, 0x1b	; 27
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	4a 95       	dec	r20
 104:	e2 f7       	brpl	.-8      	; 0xfe <main+0x92>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	8b bb       	out	0x1b, r24	; 27
				_delay_ms(2500);
				clear_bit(PORTA,flag-1)	;
		}
		if(read_bit(PINC,0)==1)
		{
		flag++;
 10c:	ab 01       	movw	r20, r22
 10e:	b8 cf       	rjmp	.-144    	; 0x80 <main+0x14>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
