
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000652  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000582  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000308  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PORTC  (*(volatile unsigned char *)0x35)
#define DDRC   (*(volatile unsigned char*)0x34)
#define PINC   (*(volatile unsigned char*)0x33)

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	 DDRA=0b11111111;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	 clear_bit(DDRC,0);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	84 bb       	out	0x14, r24	; 20
	 set_bit(PORTC,0) ;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	81 60       	ori	r24, 0x01	; 1
  86:	85 bb       	out	0x15, r24	; 21
     
    
    while (1) 
    {   if(read_bit(PINC,0)==0)
  88:	98 99       	sbic	0x13, 0	; 19
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
  8c:	46 c0       	rjmp	.+140    	; 0x11a <main+0xae>
		{
		while(read_bit(PINC,0)==0)	
		{
		
		for (volatile int i=0 ;i<=8 ;i++)
  8e:	1c 82       	std	Y+4, r1	; 0x04
  90:	1b 82       	std	Y+3, r1	; 0x03
  92:	1a c0       	rjmp	.+52     	; 0xc8 <main+0x5c>
		{
			PORTA|=1<<i;
  94:	2b 81       	ldd	r18, Y+3	; 0x03
  96:	3c 81       	ldd	r19, Y+4	; 0x04
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	2a 95       	dec	r18
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x32>
  a6:	9b b3       	in	r25, 0x1b	; 27
  a8:	89 2b       	or	r24, r25
  aa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e9       	ldi	r18, 0x9F	; 159
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
    {   if(read_bit(PINC,0)==0)
		{
		while(read_bit(PINC,0)==0)	
		{
		
		for (volatile int i=0 ;i<=8 ;i++)
  be:	8b 81       	ldd	r24, Y+3	; 0x03
  c0:	9c 81       	ldd	r25, Y+4	; 0x04
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	9c 83       	std	Y+4, r25	; 0x04
  c6:	8b 83       	std	Y+3, r24	; 0x03
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	9c 81       	ldd	r25, Y+4	; 0x04
  cc:	09 97       	sbiw	r24, 0x09	; 9
  ce:	14 f3       	brlt	.-60     	; 0x94 <main+0x28>
		{
			PORTA|=1<<i;
			_delay_ms(500);
		}
		for (volatile int i=8 ;i>=0 ;i--)
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	1c c0       	rjmp	.+56     	; 0x112 <main+0xa6>
		{
			PORTA &=~(1<<i);
  da:	29 81       	ldd	r18, Y+1	; 0x01
  dc:	3a 81       	ldd	r19, Y+2	; 0x02
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x78>
  ec:	80 95       	com	r24
  ee:	90 95       	com	r25
  f0:	9b b3       	in	r25, 0x1b	; 27
  f2:	89 23       	and	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	2f e9       	ldi	r18, 0x9F	; 159
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x90>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
		for (volatile int i=0 ;i<=8 ;i++)
		{
			PORTA|=1<<i;
			_delay_ms(500);
		}
		for (volatile int i=8 ;i>=0 ;i--)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	99 23       	and	r25, r25
 118:	04 f7       	brge	.-64     	; 0xda <main+0x6e>
     
    
    while (1) 
    {   if(read_bit(PINC,0)==0)
		{
		while(read_bit(PINC,0)==0)	
 11a:	98 9b       	sbis	0x13, 0	; 19
 11c:	b8 cf       	rjmp	.-144    	; 0x8e <main+0x22>
 11e:	b4 cf       	rjmp	.-152    	; 0x88 <main+0x1c>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
