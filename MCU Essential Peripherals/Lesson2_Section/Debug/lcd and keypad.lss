
lcd and keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fa  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_lcd_kick>:

 
//#include <lcd.h>
void LCD_lcd_kick()
{
	LCD_CTRL |= (1 <<  ENABLE_SWITCH);
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	83 ed       	ldi	r24, 0xD3	; 211
  74:	90 e3       	ldi	r25, 0x30	; 48
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <LCD_lcd_kick+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <LCD_lcd_kick+0x10>
  7c:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 <<  ENABLE_SWITCH);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	87 7f       	andi	r24, 0xF7	; 247
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <LCD_check_lcd_isbusy>:
}

void LCD_check_lcd_isbusy(void) 
{ 
DataDir_LDD_port&=~(0xff<<4);// DDR PORT A input mode
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	8a bb       	out	0x1a, r24	; 26
 //  put in read mode
	LCD_CTRL |= (1 << RW_SWITCH);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH); //close the command 
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &=~(1<<ENABLE_SWITCH); // close the enable to stop
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_check_lcd_isbusy+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_check_lcd_isbusy+0x22>
  a8:	00 00       	nop
	_delay_ms(50);
	
	LCD_CTRL &=(1<<ENABLE_SWITCH);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	88 70       	andi	r24, 0x08	; 8
  ae:	88 bb       	out	0x18, r24	; 24
	DataDir_LDD_port&=(0xff<<4);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &=~(1 << RW_SWITCH);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	08 95       	ret

000000be <LCD_WRITE_COMMAND>:
//void LCD_clear_screen()
//{
  //  LCD_WRITE_COMMAND(LCD_clear_screen());
//}
void LCD_WRITE_COMMAND(unsigned char command)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
  c2:	0e 94 43 00 	call	0x86	; 0x86 <LCD_check_lcd_isbusy>
	LCD_PORT = command;
  c6:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	89 7f       	andi	r24, 0xF9	; 249
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_WRITE_COMMAND+0x14>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_WRITE_COMMAND+0x1a>
  d8:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
  da:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_lcd_kick>
	#endif
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
  e6:	0e 94 43 00 	call	0x86	; 0x86 <LCD_check_lcd_isbusy>
	LCD_PORT = character;
  ea:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1 << RW_SWITCH) ;
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL |=(1 << RS_SWITCH) ;	
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_WRITE_CHAR+0x1a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_WRITE_CHAR+0x20>
 102:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 104:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_lcd_kick>
	#endif
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_INIT>:
 10c:	87 e8       	ldi	r24, 0x87	; 135
 10e:	93 e1       	ldi	r25, 0x13	; 19
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_INIT+0x4>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_INIT+0xa>
 116:	00 00       	nop
void LCD_INIT()
{
_delay_ms(20);
#ifdef EIGHT_BIT_MODE
    LCD_check_lcd_isbusy() ;
 118:	0e 94 43 00 	call	0x86	; 0x86 <LCD_check_lcd_isbusy>
DataDir_LDD_port|=(1<<ENABLE_SWITCH)|(1<<RW_SWITCH)|(1<<RS_SWITCH);
 11c:	8a b3       	in	r24, 0x1a	; 26
 11e:	8e 60       	ori	r24, 0x0E	; 14
 120:	8a bb       	out	0x1a, r24	; 26
LCD_CTRL&=~(1<<ENABLE_SWITCH)|(1<<RW_SWITCH)|(1<<RS_SWITCH);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	87 7f       	andi	r24, 0xF7	; 247
 126:	88 bb       	out	0x18, r24	; 24
DataDir_LDD_port=0xff; // 
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
//LCD_clear_screen();
LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES );	
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
#endif

LCD_WRITE_COMMAND(LCD_ENTRY_MODE	);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);	
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK );
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 144:	08 95       	ret

00000146 <main>:
#include "lcd.h"

int main(void)
{
    /* Replace with your application code */
	LCD_INIT();
 146:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_INIT>
	LCD_WRITE_CHAR('A');
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WRITE_CHAR>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0xa>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
