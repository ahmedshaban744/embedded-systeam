
lcd1_and_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000412  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d46  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ed  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000790  00000000  00000000  00001b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000546  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  7a:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
 */ 
#include "keypad.h"
int keypad_row[]={R0,R1,R2,R3};
int keypad_colom[]={C0,C1,C2,C3};
keypad_init()
{    keypad_data_direcation &=~(1<<R0) |(1<<R1)|(1<<R2)|(1<<R3);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
	keypad_data_direcation |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
   
	keypad_port =0xff;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <git_char>:
	
}
char git_char()
{
	for(int i=0 ;i<4;i++)
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	7b c0       	rjmp	.+246    	; 0x190 <git_char+0xfc>
	{
		keypad_port |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 6f       	ori	r24, 0xF0	; 240
  9e:	82 bb       	out	0x12, r24	; 18
		keypad_port &=~(1<<keypad_colom[i]);
  a0:	22 b3       	in	r18, 0x12	; 18
  a2:	fb 01       	movw	r30, r22
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	00 80       	ld	r0, Z
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <git_char+0x24>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <git_char+0x20>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	82 bb       	out	0x12, r24	; 18
		for(int j=0 ;j<4;j++)
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	5e c0       	rjmp	.+188    	; 0x184 <git_char+0xf0>
		{
			if(!(keypad_pin&(1<<keypad_row[j])))
  c8:	80 b3       	in	r24, 0x10	; 16
  ca:	fa 01       	movw	r30, r20
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e8 59       	subi	r30, 0x98	; 152
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	20 81       	ld	r18, Z
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 2e       	mov	r0, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <git_char+0x4c>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <git_char+0x48>
  e4:	80 fd       	sbrc	r24, 0
  e6:	4c c0       	rjmp	.+152    	; 0x180 <git_char+0xec>
			{
				while(!(keypad_pin&(1<<keypad_row[j])));
  e8:	80 b3       	in	r24, 0x10	; 16
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <git_char+0x60>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <git_char+0x5c>
  f8:	80 ff       	sbrs	r24, 0
  fa:	f6 cf       	rjmp	.-20     	; 0xe8 <git_char+0x54>
				switch(i)
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	71 05       	cpc	r23, r1
 100:	c9 f0       	breq	.+50     	; 0x134 <git_char+0xa0>
 102:	24 f4       	brge	.+8      	; 0x10c <git_char+0x78>
 104:	61 15       	cp	r22, r1
 106:	71 05       	cpc	r23, r1
 108:	41 f0       	breq	.+16     	; 0x11a <git_char+0x86>
 10a:	3a c0       	rjmp	.+116    	; 0x180 <git_char+0xec>
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	71 05       	cpc	r23, r1
 110:	f1 f0       	breq	.+60     	; 0x14e <git_char+0xba>
 112:	63 30       	cpi	r22, 0x03	; 3
 114:	71 05       	cpc	r23, r1
 116:	41 f1       	breq	.+80     	; 0x168 <git_char+0xd4>
 118:	33 c0       	rjmp	.+102    	; 0x180 <git_char+0xec>
				{
					case(0):
					{
							if(j==0)return '7';
 11a:	41 15       	cp	r20, r1
 11c:	51 05       	cpc	r21, r1
 11e:	f1 f1       	breq	.+124    	; 0x19c <git_char+0x108>
							else if(j==1)return '4';
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	51 05       	cpc	r21, r1
 124:	e9 f1       	breq	.+122    	; 0x1a0 <git_char+0x10c>
							else if(j==2)return '1';
 126:	42 30       	cpi	r20, 0x02	; 2
 128:	51 05       	cpc	r21, r1
 12a:	e1 f1       	breq	.+120    	; 0x1a4 <git_char+0x110>
							else if(j==3)return '!';
 12c:	43 30       	cpi	r20, 0x03	; 3
 12e:	51 05       	cpc	r21, r1
 130:	39 f5       	brne	.+78     	; 0x180 <git_char+0xec>
 132:	3a c0       	rjmp	.+116    	; 0x1a8 <git_char+0x114>
							break;
					}
					
						case(1):
					{
						     if(j==0)return '8';
 134:	41 15       	cp	r20, r1
 136:	51 05       	cpc	r21, r1
 138:	c9 f1       	breq	.+114    	; 0x1ac <git_char+0x118>
							 else if(j==1)return '5';
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	51 05       	cpc	r21, r1
 13e:	c1 f1       	breq	.+112    	; 0x1b0 <git_char+0x11c>
							 else if(j==2)return '2';
 140:	42 30       	cpi	r20, 0x02	; 2
 142:	51 05       	cpc	r21, r1
 144:	b9 f1       	breq	.+110    	; 0x1b4 <git_char+0x120>
							 else if(j==3)return '0';
 146:	43 30       	cpi	r20, 0x03	; 3
 148:	51 05       	cpc	r21, r1
 14a:	d1 f4       	brne	.+52     	; 0x180 <git_char+0xec>
 14c:	35 c0       	rjmp	.+106    	; 0x1b8 <git_char+0x124>
							break;
							}
					case(2):
					{
							if(j==0)return '9';
 14e:	41 15       	cp	r20, r1
 150:	51 05       	cpc	r21, r1
 152:	a1 f1       	breq	.+104    	; 0x1bc <git_char+0x128>
					     	else if(j==1)return '6';
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	51 05       	cpc	r21, r1
 158:	99 f1       	breq	.+102    	; 0x1c0 <git_char+0x12c>
							else if(j==2)return '3';
 15a:	42 30       	cpi	r20, 0x02	; 2
 15c:	51 05       	cpc	r21, r1
 15e:	91 f1       	breq	.+100    	; 0x1c4 <git_char+0x130>
							else if(j==3)return '=';
 160:	43 30       	cpi	r20, 0x03	; 3
 162:	51 05       	cpc	r21, r1
 164:	69 f4       	brne	.+26     	; 0x180 <git_char+0xec>
 166:	30 c0       	rjmp	.+96     	; 0x1c8 <git_char+0x134>
						 	break;
							}
					case(3):
							{
					     	if(j==0)return '/';
 168:	41 15       	cp	r20, r1
 16a:	51 05       	cpc	r21, r1
 16c:	79 f1       	breq	.+94     	; 0x1cc <git_char+0x138>
							else if(j==1)return '*';
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	51 05       	cpc	r21, r1
 172:	71 f1       	breq	.+92     	; 0x1d0 <git_char+0x13c>
							else if(j==2)return '-';
 174:	42 30       	cpi	r20, 0x02	; 2
 176:	51 05       	cpc	r21, r1
 178:	69 f1       	breq	.+90     	; 0x1d4 <git_char+0x140>
							else if(j==3)return '+';
 17a:	43 30       	cpi	r20, 0x03	; 3
 17c:	51 05       	cpc	r21, r1
 17e:	61 f1       	breq	.+88     	; 0x1d8 <git_char+0x144>
{
	for(int i=0 ;i<4;i++)
	{
		keypad_port |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
		keypad_port &=~(1<<keypad_colom[i]);
		for(int j=0 ;j<4;j++)
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	5f 4f       	sbci	r21, 0xFF	; 255
 184:	44 30       	cpi	r20, 0x04	; 4
 186:	51 05       	cpc	r21, r1
 188:	0c f4       	brge	.+2      	; 0x18c <git_char+0xf8>
 18a:	9e cf       	rjmp	.-196    	; 0xc8 <git_char+0x34>
	keypad_port =0xff;
	
}
char git_char()
{
	for(int i=0 ;i<4;i++)
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	64 30       	cpi	r22, 0x04	; 4
 192:	71 05       	cpc	r23, r1
 194:	0c f4       	brge	.+2      	; 0x198 <git_char+0x104>
 196:	81 cf       	rjmp	.-254    	; 0x9a <git_char+0x6>
			}
		
	    }
	
	 }
	return 'N';
 198:	8e e4       	ldi	r24, 0x4E	; 78
 19a:	08 95       	ret
				while(!(keypad_pin&(1<<keypad_row[j])));
				switch(i)
				{
					case(0):
					{
							if(j==0)return '7';
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	08 95       	ret
							else if(j==1)return '4';
 1a0:	84 e3       	ldi	r24, 0x34	; 52
 1a2:	08 95       	ret
							else if(j==2)return '1';
 1a4:	81 e3       	ldi	r24, 0x31	; 49
 1a6:	08 95       	ret
							else if(j==3)return '!';
 1a8:	81 e2       	ldi	r24, 0x21	; 33
 1aa:	08 95       	ret
							break;
					}
					
						case(1):
					{
						     if(j==0)return '8';
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	08 95       	ret
							 else if(j==1)return '5';
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	08 95       	ret
							 else if(j==2)return '2';
 1b4:	82 e3       	ldi	r24, 0x32	; 50
 1b6:	08 95       	ret
							 else if(j==3)return '0';
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	08 95       	ret
							break;
							}
					case(2):
					{
							if(j==0)return '9';
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	08 95       	ret
					     	else if(j==1)return '6';
 1c0:	86 e3       	ldi	r24, 0x36	; 54
 1c2:	08 95       	ret
							else if(j==2)return '3';
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	08 95       	ret
							else if(j==3)return '=';
 1c8:	8d e3       	ldi	r24, 0x3D	; 61
 1ca:	08 95       	ret
						 	break;
							}
					case(3):
							{
					     	if(j==0)return '/';
 1cc:	8f e2       	ldi	r24, 0x2F	; 47
 1ce:	08 95       	ret
							else if(j==1)return '*';
 1d0:	8a e2       	ldi	r24, 0x2A	; 42
 1d2:	08 95       	ret
							else if(j==2)return '-';
 1d4:	8d e2       	ldi	r24, 0x2D	; 45
 1d6:	08 95       	ret
							else if(j==3)return '+';
 1d8:	8b e2       	ldi	r24, 0x2B	; 43
		
	    }
	
	 }
	return 'N';
}
 1da:	08 95       	ret

000001dc <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_lcd_kick+0xa>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_lcd_kick+0x10>
 1ec:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret

000001f6 <LCD_check_lcd_isbusy>:
			count = 0;
		}
	}
}
void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<shift);
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
 202:	88 b3       	in	r24, 0x18	; 24
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 208:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<4);
 20c:	8a b3       	in	r24, 0x1a	; 26
 20e:	80 6f       	ori	r24, 0xF0	; 240
 210:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 212:	88 b3       	in	r24, 0x18	; 24
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	88 bb       	out	0x18, r24	; 24
 218:	08 95       	ret

0000021a <LCD_WRITE_COMMAND>:
void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}
void LCD_WRITE_COMMAND(unsigned char command){
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
	//LCD_check_lcd_isbusy();
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 21e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_check_lcd_isbusy>
	LCD_PORT = command; // put the command  at port-A
 222:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));  //  make portB select command and at read mode
 224:	88 b3       	in	r24, 0x18	; 24
 226:	89 7f       	andi	r24, 0xF9	; 249
 228:	88 bb       	out	0x18, r24	; 24
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_WRITE_COMMAND+0x14>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_WRITE_COMMAND+0x1a>
 234:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 236:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <LCD_GOTO_XY>:
 */


#include "lcd.h"

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	c8 2f       	mov	r28, r24
 244:	d6 2f       	mov	r29, r22
	if (line == 1)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	31 f4       	brne	.+12     	; 0x256 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 24a:	60 31       	cpi	r22, 0x10	; 16
 24c:	20 f4       	brcc	.+8      	; 0x256 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	86 0f       	add	r24, r22
 252:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 256:	c2 30       	cpi	r28, 0x02	; 2
 258:	31 f4       	brne	.+12     	; 0x266 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 25a:	d0 31       	cpi	r29, 0x10	; 16
 25c:	20 f4       	brcc	.+8      	; 0x266 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 25e:	80 ec       	ldi	r24, 0xC0	; 192
 260:	8d 0f       	add	r24, r29
 262:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
		}
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD_clear_screen>:
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
 272:	08 95       	ret

00000274 <LCD_INIT>:
 274:	87 e8       	ldi	r24, 0x87	; 135
 276:	93 e1       	ldi	r25, 0x13	; 19
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_INIT+0x4>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_INIT+0xa>
 27e:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(20);
	//LCD_check_lcd_isbusy();
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH); // DDRB   (enable the register , send data , read mode)
 280:	87 b3       	in	r24, 0x17	; 23
 282:	8e 60       	ori	r24, 0x0E	; 14
 284:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);      // PORTB   (disable the register  , send command , write mode)
 286:	88 b3       	in	r24, 0x18	; 24
 288:	81 7f       	andi	r24, 0xF1	; 241
 28a:	88 bb       	out	0x18, r24	; 24
	
	DataDir_LCD_PORT = 0xFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a bb       	out	0x1a, r24	; 26
 290:	85 ea       	ldi	r24, 0xA5	; 165
 292:	9e e0       	ldi	r25, 0x0E	; 14
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_INIT+0x20>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_INIT+0x26>
 29a:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen(); 
 29c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 2a0:	88 e3       	ldi	r24, 0x38	; 56
 2a2:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	//LCD_WRITE_COMMAND(0x02);
	
	#endif
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WRITE_COMMAND>
 2b8:	08 95       	ret

000002ba <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
void LCD_WRITE_CHAR(unsigned char character){
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 2be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_check_lcd_isbusy>
	LCD_PORT = character;
 2c2:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1 << RW_SWITCH);
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL |= (1 << RS_SWITCH);
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	89 ef       	ldi	r24, 0xF9	; 249
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_WRITE_CHAR+0x1a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_WRITE_CHAR+0x20>
 2da:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 2dc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_lcd_kick>
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	_delay_ms(1);
	LCD_lcd_kick ();
	#endif
}
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	8c 01       	movw	r16, r24
	int count = 0;
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 2f2:	18 c0       	rjmp	.+48     	; 0x324 <LCD_WRITE_STRING+0x40>
		count++;
 2f4:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 2f6:	0f 5f       	subi	r16, 0xFF	; 255
 2f8:	1f 4f       	sbci	r17, 0xFF	; 255
 2fa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_WRITE_CHAR>
		if (count == 16)
 2fe:	c0 31       	cpi	r28, 0x10	; 16
 300:	d1 05       	cpc	r29, r1
 302:	29 f4       	brne	.+10     	; 0x30e <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_GOTO_XY>
 30c:	0b c0       	rjmp	.+22     	; 0x324 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 30e:	c0 32       	cpi	r28, 0x20	; 32
 310:	d1 05       	cpc	r29, r1
 312:	41 f4       	brne	.+16     	; 0x324 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 314:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_GOTO_XY>
			count = 0;
 320:	c0 e0       	ldi	r28, 0x00	; 0
 322:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 324:	f8 01       	movw	r30, r16
 326:	80 81       	ld	r24, Z
 328:	81 11       	cpse	r24, r1
 32a:	e4 cf       	rjmp	.-56     	; 0x2f4 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <main>:
static unsigned char segment_number[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
static unsigned char num[]={'0','1','2','3','4','5','6','7','8','9'};
int main(void)
{
	 
	 LCD_INIT();
 336:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_INIT>
	 	  LCD_WRITE_STRING("  *welcom*");	 
 33a:	80 e7       	ldi	r24, 0x70	; 112
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_WRITE_STRING>
 342:	2f e7       	ldi	r18, 0x7F	; 127
 344:	84 e8       	ldi	r24, 0x84	; 132
 346:	9e e1       	ldi	r25, 0x1E	; 30
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x12>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x1c>
 352:	00 00       	nop
		   _delay_ms(10000);
		  LCD_clear_screen();
 354:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
	DDRC=0xff;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	84 bb       	out	0x14, r24	; 20
	unsigned int j;
			
			for(j=0;j<10;j++)
 35c:	c0 e0       	ldi	r28, 0x00	; 0
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	15 c0       	rjmp	.+42     	; 0x38c <main+0x56>
			{
				PORTC=segment_number[j];
 362:	fe 01       	movw	r30, r28
 364:	ec 56       	subi	r30, 0x6C	; 108
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 81       	ld	r24, Z
 36a:	85 bb       	out	0x15, r24	; 21
 36c:	2f e7       	ldi	r18, 0x7F	; 127
 36e:	84 e8       	ldi	r24, 0x84	; 132
 370:	9e e1       	ldi	r25, 0x1E	; 30
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x3c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x46>
 37c:	00 00       	nop
				
				_delay_ms(10000);
				LCD_WRITE_CHAR(num[j]);
 37e:	fe 01       	movw	r30, r28
 380:	e6 57       	subi	r30, 0x76	; 118
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	80 81       	ld	r24, Z
 386:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_WRITE_CHAR>
		   _delay_ms(10000);
		  LCD_clear_screen();
	DDRC=0xff;
	unsigned int j;
			
			for(j=0;j<10;j++)
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	ca 30       	cpi	r28, 0x0A	; 10
 38e:	d1 05       	cpc	r29, r1
 390:	40 f3       	brcs	.-48     	; 0x362 <main+0x2c>
 392:	2f e7       	ldi	r18, 0x7F	; 127
 394:	84 e8       	ldi	r24, 0x84	; 132
 396:	9e e1       	ldi	r25, 0x1E	; 30
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x62>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x6c>
 3a2:	00 00       	nop
				
				_delay_ms(10000);
				LCD_WRITE_CHAR(num[j]);
			}
				_delay_ms(10000);
			 LCD_clear_screen();;
 3a4:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
 keypad_init();
 3a8:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
 LCD_WRITE_STRING("*keypad ready*");
 3ac:	8b e7       	ldi	r24, 0x7B	; 123
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_WRITE_STRING>
 3b4:	2f e7       	ldi	r18, 0x7F	; 127
 3b6:	84 e8       	ldi	r24, 0x84	; 132
 3b8:	9e e1       	ldi	r25, 0x1E	; 30
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x84>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x8e>
 3c4:	00 00       	nop
 _delay_ms(10000);
 LCD_clear_screen(); 
 3c6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
	 int keypad_press;
	 int count;

	 while (1)
	 {
		 keypad_press=git_char();
 3ca:	0e 94 4a 00 	call	0x94	; 0x94 <git_char>
 3ce:	c8 2f       	mov	r28, r24
		 
		 switch(keypad_press)
 3d0:	81 32       	cpi	r24, 0x21	; 33
 3d2:	19 f0       	breq	.+6      	; 0x3da <main+0xa4>
 3d4:	8e 34       	cpi	r24, 0x4E	; 78
 3d6:	c9 f3       	breq	.-14     	; 0x3ca <main+0x94>
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <main+0xaa>
			 
			 break;
			 
			 case ('!'):
			 
			 LCD_clear_screen();
 3da:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
			 break;
 3de:	f5 cf       	rjmp	.-22     	; 0x3ca <main+0x94>
			 
			 default:
	
			 if(count == 16) // check if cursor reach to the end of line 1
 3e0:	00 31       	cpi	r16, 0x10	; 16
 3e2:	11 05       	cpc	r17, r1
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <main+0xba>
			 {
				 LCD_GOTO_XY(2,0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_GOTO_XY>
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			 }
			 else if(count == 32)// check if cursor reach to the end of line 2
 3f0:	00 32       	cpi	r16, 0x20	; 32
 3f2:	11 05       	cpc	r17, r1
 3f4:	31 f4       	brne	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			 {
				 LCD_clear_screen();
 3f6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_clear_screen>
				 LCD_GOTO_XY(1,0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_GOTO_XY>
			 }
			 count++;
 402:	0f 5f       	subi	r16, 0xFF	; 255
 404:	1f 4f       	sbci	r17, 0xFF	; 255
			 
			 
			 LCD_WRITE_CHAR(keypad_press) ;
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_WRITE_CHAR>
 40c:	de cf       	rjmp	.-68     	; 0x3ca <main+0x94>

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
