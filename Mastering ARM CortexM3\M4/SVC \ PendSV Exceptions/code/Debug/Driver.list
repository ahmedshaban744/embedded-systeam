
Driver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  4 .ARM          00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000690  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000690  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003df8  00000000  00000000  000106b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a1e  00000000  00000000  000144b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b60  00000000  00000000  00014ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00015a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00015bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d6d  00000000  00000000  00015d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028c1  00000000  00000000  00019ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00012b42  00000000  00000000  0001c3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002eee8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e0  00000000  00000000  0002ef3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000670 	.word	0x08000670

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000670 	.word	0x08000670

08000170 <OS_serves>:
GPIOB_clock_enable();
AFIO_clock_enable();

}
void  OS_serves(int *fream_pointer)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

uint32_t val1,val2;
uint8_t SVC_number;
SVC_number =    *((unsigned char*)(((unsigned char*)fream_pointer[6])-2));
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3318      	adds	r3, #24
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3b02      	subs	r3, #2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	75fb      	strb	r3, [r7, #23]
val1= fream_pointer[0];
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	613b      	str	r3, [r7, #16]
val2= fream_pointer[1];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	60fb      	str	r3, [r7, #12]
switch(SVC_number)
 8000192:	7dfb      	ldrb	r3, [r7, #23]
 8000194:	2b03      	cmp	r3, #3
 8000196:	d014      	beq.n	80001c2 <OS_serves+0x52>
 8000198:	2b03      	cmp	r3, #3
 800019a:	dc1a      	bgt.n	80001d2 <OS_serves+0x62>
 800019c:	2b01      	cmp	r3, #1
 800019e:	d002      	beq.n	80001a6 <OS_serves+0x36>
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d007      	beq.n	80001b4 <OS_serves+0x44>
	break;
case 3:
	fream_pointer[0]=val1*val2;
	break;
}
}
 80001a4:	e015      	b.n	80001d2 <OS_serves+0x62>
	fream_pointer[0]=val1+val2;
 80001a6:	693a      	ldr	r2, [r7, #16]
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	4413      	add	r3, r2
 80001ac:	461a      	mov	r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	601a      	str	r2, [r3, #0]
	break;
 80001b2:	e00e      	b.n	80001d2 <OS_serves+0x62>
	fream_pointer[0]=val1-val2;
 80001b4:	693a      	ldr	r2, [r7, #16]
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	1ad3      	subs	r3, r2, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	601a      	str	r2, [r3, #0]
	break;
 80001c0:	e007      	b.n	80001d2 <OS_serves+0x62>
	fream_pointer[0]=val1*val2;
 80001c2:	693b      	ldr	r3, [r7, #16]
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	fb02 f303 	mul.w	r3, r2, r3
 80001ca:	461a      	mov	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	601a      	str	r2, [r3, #0]
	break;
 80001d0:	bf00      	nop
}
 80001d2:	bf00      	nop
 80001d4:	371c      	adds	r7, #28
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <SVC_Handler>:
__attribute ((nacked))  void SVC_Handler()
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
__asm("tst lr,#4 \n\t"
 80001e0:	f01e 0f04 	tst.w	lr, #4
 80001e4:	bf0c      	ite	eq
 80001e6:	f3ef 8008 	mrseq	r0, MSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
 80001ee:	f7ff bfbf 	b.w	8000170 <OS_serves>
		"ITE EQ \n\t"
		"mrseq r0,msp \n\t"
	    "mrsne r0,psp \n\t"
		"b OS_serves");
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000200:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000206:	490c      	ldr	r1, [pc, #48]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800020c:	e002      	b.n	8000214 <LoopCopyDataInit>

0800020e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000212:	3304      	adds	r3, #4

08000214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000218:	d3f9      	bcc.n	800020e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 800021c:	4c09      	ldr	r4, [pc, #36]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000220:	e001      	b.n	8000226 <LoopFillZerobss>

08000222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000224:	3204      	adds	r2, #4

08000226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000228:	d3fb      	bcc.n	8000222 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022a:	f000 f9fd 	bl	8000628 <__libc_init_array>

0800022e <LoopForever>:
/* Call the application's entry point.*/
 // bl main

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	08000690 	.word	0x08000690
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	2000006c 	.word	0x2000006c

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>
	...

0800024c <EXTI0_IRQHandler>:
//================================================================
//================== ISR Funcatiom================================
//================================================================

void EXTI0_IRQHandler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
EXTI->PR |=(1<<0);
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <EXTI0_IRQHandler+0x1c>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <EXTI0_IRQHandler+0x1c>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6153      	str	r3, [r2, #20]
Gp_IRQ_Callback[0]();
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <EXTI0_IRQHandler+0x20>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4798      	blx	r3
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010400 	.word	0x40010400
 800026c:	20000030 	.word	0x20000030

08000270 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <EXTI1_IRQHandler+0x1c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <EXTI1_IRQHandler+0x1c>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <EXTI1_IRQHandler+0x20>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4798      	blx	r3
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40010400 	.word	0x40010400
 8000290:	20000030 	.word	0x20000030

08000294 <EXTI2_IRQHandler>:

 void EXTI2_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <EXTI2_IRQHandler+0x1c>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <EXTI2_IRQHandler+0x1c>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <EXTI2_IRQHandler+0x20>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4798      	blx	r3
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010400 	.word	0x40010400
 80002b4:	20000030 	.word	0x20000030

080002b8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <EXTI3_IRQHandler+0x1c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <EXTI3_IRQHandler+0x1c>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <EXTI3_IRQHandler+0x20>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4798      	blx	r3
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010400 	.word	0x40010400
 80002d8:	20000030 	.word	0x20000030

080002dc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI4_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI4_IRQHandler+0x1c>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI4_IRQHandler+0x20>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4798      	blx	r3
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000030 	.word	0x20000030

08000300 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	2b00      	cmp	r3, #0
 800030e:	d008      	beq.n	8000322 <EXTI9_5_IRQHandler+0x22>
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <EXTI9_5_IRQHandler+0xa4>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800032a:	2b00      	cmp	r3, #0
 800032c:	d008      	beq.n	8000340 <EXTI9_5_IRQHandler+0x40>
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <EXTI9_5_IRQHandler+0xa4>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d008      	beq.n	800035e <EXTI9_5_IRQHandler+0x5e>
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000356:	6153      	str	r3, [r2, #20]
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <EXTI9_5_IRQHandler+0xa4>)
 800035a:	69db      	ldr	r3, [r3, #28]
 800035c:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000366:	2b00      	cmp	r3, #0
 8000368:	d008      	beq.n	800037c <EXTI9_5_IRQHandler+0x7c>
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <EXTI9_5_IRQHandler+0xa4>)
 8000378:	6a1b      	ldr	r3, [r3, #32]
 800037a:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000384:	2b00      	cmp	r3, #0
 8000386:	d008      	beq.n	800039a <EXTI9_5_IRQHandler+0x9a>
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000392:	6153      	str	r3, [r2, #20]
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <EXTI9_5_IRQHandler+0xa4>)
 8000396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000398:	4798      	blx	r3
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010400 	.word	0x40010400
 80003a4:	20000030 	.word	0x20000030

080003a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 80003ac:	4b2d      	ldr	r3, [pc, #180]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d008      	beq.n	80003ca <EXTI15_10_IRQHandler+0x22>
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a29      	ldr	r2, [pc, #164]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003c2:	6153      	str	r3, [r2, #20]
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d008      	beq.n	80003e8 <EXTI15_10_IRQHandler+0x40>
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a22      	ldr	r2, [pc, #136]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 80003e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e6:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d008      	beq.n	8000406 <EXTI15_10_IRQHandler+0x5e>
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 80003fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <EXTI15_10_IRQHandler+0x7c>
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 8000420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000422:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI15_10_IRQHandler+0x9a>
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 800043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000440:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800044a:	2b00      	cmp	r3, #0
 800044c:	d008      	beq.n	8000460 <EXTI15_10_IRQHandler+0xb8>
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a04      	ldr	r2, [pc, #16]	; (8000464 <EXTI15_10_IRQHandler+0xbc>)
 8000454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b03      	ldr	r3, [pc, #12]	; (8000468 <EXTI15_10_IRQHandler+0xc0>)
 800045c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800045e:	4798      	blx	r3
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010400 	.word	0x40010400
 8000468:	20000030 	.word	0x20000030

0800046c <SPI1_IRQHandler>:
	//===================IRQ==============================================
	//====================================================================

}
void SPI1_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	struct intrput_src  irq_src;
	irq_src.RXNE=  ((SPI1->SPI_SR &(1<<0)) >>0);
 8000472:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <SPI1_IRQHandler+0xb8>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	793b      	ldrb	r3, [r7, #4]
 800047e:	f362 0300 	bfi	r3, r2, #0, #1
 8000482:	713b      	strb	r3, [r7, #4]
	irq_src.TXE=   ((SPI1->SPI_SR &(1<<1)) >>1);
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <SPI1_IRQHandler+0xb8>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	085b      	lsrs	r3, r3, #1
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	b2da      	uxtb	r2, r3
 8000490:	793b      	ldrb	r3, [r7, #4]
 8000492:	f362 0341 	bfi	r3, r2, #1, #1
 8000496:	713b      	strb	r3, [r7, #4]
	irq_src.CHSIDE=((SPI1->SPI_SR &(1<<2)) >>2);
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <SPI1_IRQHandler+0xb8>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	089b      	lsrs	r3, r3, #2
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	793b      	ldrb	r3, [r7, #4]
 80004a6:	f362 0382 	bfi	r3, r2, #2, #1
 80004aa:	713b      	strb	r3, [r7, #4]
	irq_src.UDR=   ((SPI1->SPI_SR &(1<<3)) >>3);
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <SPI1_IRQHandler+0xb8>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	793b      	ldrb	r3, [r7, #4]
 80004ba:	f362 03c3 	bfi	r3, r2, #3, #1
 80004be:	713b      	strb	r3, [r7, #4]
	irq_src.CRCERR=((SPI1->SPI_SR &(1<<4)) >>4);
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <SPI1_IRQHandler+0xb8>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	091b      	lsrs	r3, r3, #4
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	793b      	ldrb	r3, [r7, #4]
 80004ce:	f362 1304 	bfi	r3, r2, #4, #1
 80004d2:	713b      	strb	r3, [r7, #4]
	irq_src.MODF=  ((SPI1->SPI_SR &(1<<5)) >>5);
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <SPI1_IRQHandler+0xb8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	095b      	lsrs	r3, r3, #5
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	793b      	ldrb	r3, [r7, #4]
 80004e2:	f362 1345 	bfi	r3, r2, #5, #1
 80004e6:	713b      	strb	r3, [r7, #4]
	irq_src.OVR=   ((SPI1->SPI_SR &(1<<6)) >>6);
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <SPI1_IRQHandler+0xb8>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	099b      	lsrs	r3, r3, #6
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	793b      	ldrb	r3, [r7, #4]
 80004f6:	f362 1386 	bfi	r3, r2, #6, #1
 80004fa:	713b      	strb	r3, [r7, #4]
	irq_src.BSY=   ((SPI1->SPI_SR&(1<<7)) >>7);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <SPI1_IRQHandler+0xb8>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	09db      	lsrs	r3, r3, #7
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	793b      	ldrb	r3, [r7, #4]
 800050a:	f362 13c7 	bfi	r3, r2, #7, #1
 800050e:	713b      	strb	r3, [r7, #4]

	GP_SPI[SPI1_index]->p_IQR_callback(irq_src);
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <SPI1_IRQHandler+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	7938      	ldrb	r0, [r7, #4]
 8000518:	4798      	blx	r3


}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40013000 	.word	0x40013000
 8000528:	2000001c 	.word	0x2000001c

0800052c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

	struct intrput_src  irq_src;
	irq_src.RXNE=  ((SPI2->SPI_SR &(1<<0)) >>0);
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	793b      	ldrb	r3, [r7, #4]
 800053e:	f362 0300 	bfi	r3, r2, #0, #1
 8000542:	713b      	strb	r3, [r7, #4]
	irq_src.TXE=   ((SPI2->SPI_SR &(1<<1)) >>1);
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	793b      	ldrb	r3, [r7, #4]
 8000552:	f362 0341 	bfi	r3, r2, #1, #1
 8000556:	713b      	strb	r3, [r7, #4]
	irq_src.CHSIDE=((SPI2->SPI_SR &(1<<2)) >>2);
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	f362 0382 	bfi	r3, r2, #2, #1
 800056a:	713b      	strb	r3, [r7, #4]
	irq_src.UDR=   ((SPI2->SPI_SR &(1<<3)) >>3);
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	793b      	ldrb	r3, [r7, #4]
 800057a:	f362 03c3 	bfi	r3, r2, #3, #1
 800057e:	713b      	strb	r3, [r7, #4]
	irq_src.CRCERR=((SPI2->SPI_SR &(1<<4)) >>4);
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	793b      	ldrb	r3, [r7, #4]
 800058e:	f362 1304 	bfi	r3, r2, #4, #1
 8000592:	713b      	strb	r3, [r7, #4]
	irq_src.MODF=  ((SPI2->SPI_SR &(1<<5)) >>5);
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	095b      	lsrs	r3, r3, #5
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	793b      	ldrb	r3, [r7, #4]
 80005a2:	f362 1345 	bfi	r3, r2, #5, #1
 80005a6:	713b      	strb	r3, [r7, #4]
	irq_src.OVR=   ((SPI2->SPI_SR &(1<<6)) >>6);
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	099b      	lsrs	r3, r3, #6
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	793b      	ldrb	r3, [r7, #4]
 80005b6:	f362 1386 	bfi	r3, r2, #6, #1
 80005ba:	713b      	strb	r3, [r7, #4]
	irq_src.BSY=   ((SPI2->SPI_SR&(1<<7)) >>7);
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <SPI2_IRQHandler+0xb8>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	09db      	lsrs	r3, r3, #7
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	f362 13c7 	bfi	r3, r2, #7, #1
 80005ce:	713b      	strb	r3, [r7, #4]

	GP_SPI[SPI2_index]->p_IQR_callback(irq_src);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SPI2_IRQHandler+0xbc>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	7938      	ldrb	r0, [r7, #4]
 80005d8:	4798      	blx	r3

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40003800 	.word	0x40003800
 80005e8:	2000001c 	.word	0x2000001c

080005ec <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	GL_USART_configs[0]->P_IRQ_callback();
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <USART1_IRQHandler+0x10>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	4798      	blx	r3

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000024 	.word	0x20000024

08000600 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	GL_USART_configs[1]->P_IRQ_callback();
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <USART2_IRQHandler+0x10>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4798      	blx	r3

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000024 	.word	0x20000024

08000614 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	GL_USART_configs[2]->P_IRQ_callback();
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <USART3_IRQHandler+0x10>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	4798      	blx	r3

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000024 	.word	0x20000024

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	2600      	movs	r6, #0
 800062c:	4d0c      	ldr	r5, [pc, #48]	; (8000660 <__libc_init_array+0x38>)
 800062e:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	f000 f81a 	bl	8000670 <_init>
 800063c:	2600      	movs	r6, #0
 800063e:	4d0a      	ldr	r5, [pc, #40]	; (8000668 <__libc_init_array+0x40>)
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <__libc_init_array+0x44>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	08000688 	.word	0x08000688
 8000664:	08000688 	.word	0x08000688
 8000668:	08000688 	.word	0x08000688
 800066c:	0800068c 	.word	0x0800068c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
