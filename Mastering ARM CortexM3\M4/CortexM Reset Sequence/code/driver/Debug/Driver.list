
Driver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d80  08000d80  00010d88  2**0
                  CONTENTS
  4 .ARM          00000000  08000d80  08000d80  00010d88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d80  08000d88  00010d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d80  08000d80  00010d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d84  08000d84  00010d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000d88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000d88  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b89  00000000  00000000  00010db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bef  00000000  00000000  0001593a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000db4  00000000  00000000  00016529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000172e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  000174f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002afe  00000000  00000000  000176b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ff9  00000000  00000000  0001a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c317  00000000  00000000  0001d1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000294c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006fc  00000000  00000000  0002951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d5c 	.word	0x08000d5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d5c 	.word	0x08000d5c

08000170 <swich_CPU_access_user_level>:
//#include "stm32f103c6_cortex_m3_core.h"
#include "stm32f103c6_GPIO_drivers.h"
#include "stm32f103c6_EXTI_drivers.h"
enum  user_level {Privileged,UnPrivileged};
void swich_CPU_access_user_level(enum user_level level)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	switch(level)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <swich_CPU_access_user_level+0x16>
 8000180:	2b01      	cmp	r3, #1
 8000182:	d007      	beq.n	8000194 <swich_CPU_access_user_level+0x24>
			  "msr control,R3 \n\t");
        break;

	}

}
 8000184:	e00d      	b.n	80001a2 <swich_CPU_access_user_level+0x32>
		__asm("mrs R3,control \n\t"
 8000186:	f3ef 8314 	mrs	r3, CONTROL
 800018a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800018e:	ea4f 0343 	mov.w	r3, r3, lsl #1
		break;
 8000192:	e006      	b.n	80001a2 <swich_CPU_access_user_level+0x32>
		__asm("mrs R3,control \n\t"
 8000194:	f3ef 8314 	mrs	r3, CONTROL
 8000198:	f043 0301 	orr.w	r3, r3, #1
 800019c:	f383 8814 	msr	CONTROL, r3
        break;
 80001a0:	bf00      	nop
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <EXTI9B_Callback>:
unsigned int  flag=0;
int C_IPSR  ;
void EXTI9B_Callback (void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0

	 swich_CPU_access_user_level(Privileged);
 80001b0:	2000      	movs	r0, #0
 80001b2:	f7ff ffdd 	bl	8000170 <swich_CPU_access_user_level>
	flag=1;
 80001b6:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <EXTI9B_Callback+0x14>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]

}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <clock_init>:
void clock_init()
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	GPIOA_clock_enable();
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <clock_init+0x30>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <clock_init+0x30>)
 80001ce:	f043 0304 	orr.w	r3, r3, #4
 80001d2:	6193      	str	r3, [r2, #24]
	GPIOB_clock_enable();
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <clock_init+0x30>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <clock_init+0x30>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6193      	str	r3, [r2, #24]
	AFIO_clock_enable();
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <clock_init+0x30>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a03      	ldr	r2, [pc, #12]	; (80001f4 <clock_init+0x30>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6193      	str	r3, [r2, #24]

}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <HardFault_Handler>:

void HardFault_Handler()
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <MemManage_Handler>:
void MemManage_Handler()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <BusFault_Handler>:
void BusFault_Handler()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <UsageFault_Handler>:
void UsageFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <main>:
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0
	//if make  UnPrivileged befor EXTI INIT  Tthe cpu can not have access to NVIC and can not make eny enterrput
	//swich_CPU_access_user_level(UnPrivileged);
	clock_init();
 800022e:	f7ff ffc9 	bl	80001c4 <clock_init>



	EXIT_Confing_t confuger;
	confuger.EXIT_Pin= EXTI9B9;
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <main+0x48>)
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	ca07      	ldmia	r2, {r0, r1, r2}
 800023a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	confuger.trigger_case= EXIT_Rising ;
 800023e:	2300      	movs	r3, #0
 8000240:	763b      	strb	r3, [r7, #24]

	confuger.p_IRQ_Callback = EXTI9B_Callback;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0x4c>)
 8000244:	61fb      	str	r3, [r7, #28]
	confuger.IRQ_define=EXIT_IRQ_enable;
 8000246:	2301      	movs	r3, #1
 8000248:	767b      	strb	r3, [r7, #25]
	MCAL_EXTI_GPIO_INIT(&confuger);
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f9f6 	bl	8000640 <MCAL_EXTI_GPIO_INIT>
	swich_CPU_access_user_level(UnPrivileged);
 8000254:	2001      	movs	r0, #1
 8000256:	f7ff ff8b 	bl	8000170 <swich_CPU_access_user_level>
   flag=1;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x50>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]

	while(1)
	{


		if(flag)
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <main+0x50>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0fb      	beq.n	8000260 <main+0x38>
		{

			flag=0;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <main+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
		if(flag)
 800026e:	e7f7      	b.n	8000260 <main+0x38>
 8000270:	08000d74 	.word	0x08000d74
 8000274:	080001ad 	.word	0x080001ad
 8000278:	2000001c 	.word	0x2000001c

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 fd33 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ffbb 	bl	8000228 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000d88 	.word	0x08000d88
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	20000070 	.word	0x20000070

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <enable_NVIC>:



void(*Gp_IRQ_Callback[15])(void);
void enable_NVIC(uint16_t IQR)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	80fb      	strh	r3, [r7, #6]
switch(IQR)
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d854      	bhi.n	800038a <enable_NVIC+0xba>
 80002e0:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <enable_NVIC+0x18>)
 80002e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e6:	bf00      	nop
 80002e8:	08000329 	.word	0x08000329
 80002ec:	08000337 	.word	0x08000337
 80002f0:	08000345 	.word	0x08000345
 80002f4:	08000353 	.word	0x08000353
 80002f8:	08000361 	.word	0x08000361
 80002fc:	0800036f 	.word	0x0800036f
 8000300:	0800036f 	.word	0x0800036f
 8000304:	0800036f 	.word	0x0800036f
 8000308:	0800036f 	.word	0x0800036f
 800030c:	0800036f 	.word	0x0800036f
 8000310:	0800037d 	.word	0x0800037d
 8000314:	0800037d 	.word	0x0800037d
 8000318:	0800037d 	.word	0x0800037d
 800031c:	0800037d 	.word	0x0800037d
 8000320:	0800037d 	.word	0x0800037d
 8000324:	0800037d 	.word	0x0800037d
{
case 0:
		NVIC_IRQ6_EXTI0_enable();
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <enable_NVIC+0xc4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <enable_NVIC+0xc4>)
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	6013      	str	r3, [r2, #0]
break;
 8000334:	e029      	b.n	800038a <enable_NVIC+0xba>
case 1:
		NVIC_IRQ7_EXTI1_enable();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <enable_NVIC+0xc4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <enable_NVIC+0xc4>)
 800033c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000340:	6013      	str	r3, [r2, #0]
break;
 8000342:	e022      	b.n	800038a <enable_NVIC+0xba>
case 2:
		NVIC_IRQ8_EXTI2_enable();
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <enable_NVIC+0xc4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a12      	ldr	r2, [pc, #72]	; (8000394 <enable_NVIC+0xc4>)
 800034a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034e:	6013      	str	r3, [r2, #0]
break;
 8000350:	e01b      	b.n	800038a <enable_NVIC+0xba>
case 3:
		NVIC_IRQ9_EXTI3_enable();
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <enable_NVIC+0xc4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <enable_NVIC+0xc4>)
 8000358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800035c:	6013      	str	r3, [r2, #0]
break;
 800035e:	e014      	b.n	800038a <enable_NVIC+0xba>
case 4:
		NVIC_IRQ10_EXTI4_enable();
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <enable_NVIC+0xc4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <enable_NVIC+0xc4>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036a:	6013      	str	r3, [r2, #0]
break;
 800036c:	e00d      	b.n	800038a <enable_NVIC+0xba>
case 5:
case 6:
case 7:
case 8:
case 9:
	NVIC_IRQ23_EXTI5_to_EXTI9_enable();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <enable_NVIC+0xc4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <enable_NVIC+0xc4>)
 8000374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000378:	6013      	str	r3, [r2, #0]
break;
 800037a:	e006      	b.n	800038a <enable_NVIC+0xba>
case 12:
case 13:
case 14:
case 15:

	NVIC_IRQ40_EXTI10_to_EXTI15_enable();
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <enable_NVIC+0xc8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <enable_NVIC+0xc8>)
 8000382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000386:	6013      	str	r3, [r2, #0]
break;
 8000388:	bf00      	nop


}


}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000e104 	.word	0xe000e104

0800039c <disable_NVIC>:
void disable_NVIC(uint16_t IQR)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
switch(IQR)
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	2b0f      	cmp	r3, #15
 80003aa:	d854      	bhi.n	8000456 <disable_NVIC+0xba>
 80003ac:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <disable_NVIC+0x18>)
 80003ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b2:	bf00      	nop
 80003b4:	080003f5 	.word	0x080003f5
 80003b8:	08000403 	.word	0x08000403
 80003bc:	08000411 	.word	0x08000411
 80003c0:	0800041f 	.word	0x0800041f
 80003c4:	0800042d 	.word	0x0800042d
 80003c8:	0800043b 	.word	0x0800043b
 80003cc:	0800043b 	.word	0x0800043b
 80003d0:	0800043b 	.word	0x0800043b
 80003d4:	0800043b 	.word	0x0800043b
 80003d8:	0800043b 	.word	0x0800043b
 80003dc:	08000449 	.word	0x08000449
 80003e0:	08000449 	.word	0x08000449
 80003e4:	08000449 	.word	0x08000449
 80003e8:	08000449 	.word	0x08000449
 80003ec:	08000449 	.word	0x08000449
 80003f0:	08000449 	.word	0x08000449
{
case 0:
   	NVIC_IRQ6_EXTI0_disable()   ;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <disable_NVIC+0xc4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <disable_NVIC+0xc4>)
 80003fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fe:	6013      	str	r3, [r2, #0]
break;
 8000400:	e029      	b.n	8000456 <disable_NVIC+0xba>
case 1:
		NVIC_IRQ7_EXTI1_disable();
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <disable_NVIC+0xc4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <disable_NVIC+0xc4>)
 8000408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040c:	6013      	str	r3, [r2, #0]
break;
 800040e:	e022      	b.n	8000456 <disable_NVIC+0xba>
case 2:
		NVIC_IRQ8_EXTI2_disable();
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <disable_NVIC+0xc4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <disable_NVIC+0xc4>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041a:	6013      	str	r3, [r2, #0]
break;
 800041c:	e01b      	b.n	8000456 <disable_NVIC+0xba>
case 3:
		NVIC_IRQ9_EXTI3_disable();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <disable_NVIC+0xc4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <disable_NVIC+0xc4>)
 8000424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000428:	6013      	str	r3, [r2, #0]
break;
 800042a:	e014      	b.n	8000456 <disable_NVIC+0xba>
case 4:
		NVIC_IRQ10_EXTI4_disable();
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <disable_NVIC+0xc4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <disable_NVIC+0xc4>)
 8000432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000436:	6013      	str	r3, [r2, #0]
break;
 8000438:	e00d      	b.n	8000456 <disable_NVIC+0xba>
case 5:
case 6:
case 7:
case 8:
case 9:
	NVIC_IRQ23_EXTI5_to_EXTI9_disable();
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <disable_NVIC+0xc4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <disable_NVIC+0xc4>)
 8000440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000444:	6013      	str	r3, [r2, #0]
break;
 8000446:	e006      	b.n	8000456 <disable_NVIC+0xba>
case 12:
case 13:
case 14:
case 15:

	NVIC_IRQ40_EXTI10_to_EXTI15_disable();
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <disable_NVIC+0xc8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <disable_NVIC+0xc8>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000452:	6013      	str	r3, [r2, #0]
break;
 8000454:	bf00      	nop


}


}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	e000e180 	.word	0xe000e180
 8000464:	e000e184 	.word	0xe000e184

08000468 <EXTI_UPDATE>:




void EXTI_UPDATE(EXIT_Confing_t *EXTI_config)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	//configure GPIo pin to be Altarnative input
	GPIO_pinconfig_t pinconfig;
	pinconfig.gpio_pin_number=EXTI_config->EXIT_Pin.GPIO_pin;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	891b      	ldrh	r3, [r3, #8]
 8000474:	813b      	strh	r3, [r7, #8]
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000476:	2301      	movs	r3, #1
 8000478:	72bb      	strb	r3, [r7, #10]

	MCAL_GPIO_INIT((EXTI_config->EXIT_Pin.GPIO_port),& pinconfig);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f107 0208 	add.w	r2, r7, #8
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 faaf 	bl	80009e8 <MCAL_GPIO_INIT>


	//configuer AFIO to routing between GPIO port A B C D
	uint8_t AFIO_EXTICR_Index =EXTI_config->EXIT_Pin.EXTI_Line_Number / 4;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	089b      	lsrs	r3, r3, #2
 8000490:	b29b      	uxth	r3, r3
 8000492:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_posation =(EXTI_config->EXIT_Pin.EXTI_Line_Number % 4)*4;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0303 	and.w	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	73bb      	strb	r3, [r7, #14]
	//clear the four bit first to mack sure that that the value want to write ie right
	AFIO->EXTICR[AFIO_EXTICR_Index]&=~(0XF<<AFIO_EXTICR_posation);
 80004a4:	4a5f      	ldr	r2, [pc, #380]	; (8000624 <EXTI_UPDATE+0x1bc>)
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	3302      	adds	r3, #2
 80004aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	210f      	movs	r1, #15
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	495a      	ldr	r1, [pc, #360]	; (8000624 <EXTI_UPDATE+0x1bc>)
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4002      	ands	r2, r0
 80004c0:	3302      	adds	r3, #2
 80004c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//set the value
	AFIO->EXTICR[AFIO_EXTICR_Index]   |= ((AFIO_EXTI_GPIO_MAPPING (EXTI_config->EXIT_Pin.GPIO_port) &0xf) <<AFIO_EXTICR_posation);
 80004c6:	4a57      	ldr	r2, [pc, #348]	; (8000624 <EXTI_UPDATE+0x1bc>)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	3302      	adds	r3, #2
 80004cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	4954      	ldr	r1, [pc, #336]	; (8000628 <EXTI_UPDATE+0x1c0>)
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d016      	beq.n	8000508 <EXTI_UPDATE+0xa0>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4953      	ldr	r1, [pc, #332]	; (800062c <EXTI_UPDATE+0x1c4>)
 80004e0:	428b      	cmp	r3, r1
 80004e2:	d00f      	beq.n	8000504 <EXTI_UPDATE+0x9c>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4951      	ldr	r1, [pc, #324]	; (8000630 <EXTI_UPDATE+0x1c8>)
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d008      	beq.n	8000500 <EXTI_UPDATE+0x98>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	4950      	ldr	r1, [pc, #320]	; (8000634 <EXTI_UPDATE+0x1cc>)
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d101      	bne.n	80004fc <EXTI_UPDATE+0x94>
 80004f8:	2303      	movs	r3, #3
 80004fa:	e006      	b.n	800050a <EXTI_UPDATE+0xa2>
 80004fc:	2300      	movs	r3, #0
 80004fe:	e004      	b.n	800050a <EXTI_UPDATE+0xa2>
 8000500:	2302      	movs	r3, #2
 8000502:	e002      	b.n	800050a <EXTI_UPDATE+0xa2>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <EXTI_UPDATE+0xa2>
 8000508:	2300      	movs	r3, #0
 800050a:	7bb9      	ldrb	r1, [r7, #14]
 800050c:	408b      	lsls	r3, r1
 800050e:	4618      	mov	r0, r3
 8000510:	4944      	ldr	r1, [pc, #272]	; (8000624 <EXTI_UPDATE+0x1bc>)
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	4302      	orrs	r2, r0
 8000516:	3302      	adds	r3, #2
 8000518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//update Rising OR Faling or both
	EXTI->RTSR &=~(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 800051c:	4b46      	ldr	r3, [pc, #280]	; (8000638 <EXTI_UPDATE+0x1d0>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	8812      	ldrh	r2, [r2, #0]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	43d2      	mvns	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a42      	ldr	r2, [pc, #264]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000530:	400b      	ands	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 8000534:	4b40      	ldr	r3, [pc, #256]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	8812      	ldrh	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	43d2      	mvns	r2, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a3c      	ldr	r2, [pc, #240]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000548:	400b      	ands	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]
	if(EXTI_config->trigger_case==EXIT_Rising )
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7b1b      	ldrb	r3, [r3, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <EXTI_UPDATE+0x104>
	{
		EXTI->RTSR |=(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	8812      	ldrh	r2, [r2, #0]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a34      	ldr	r2, [pc, #208]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6093      	str	r3, [r2, #8]
 800056a:	e029      	b.n	80005c0 <EXTI_UPDATE+0x158>
	}
	else if(EXTI_config->trigger_case==EXIT_Falling  )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7b1b      	ldrb	r3, [r3, #12]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10b      	bne.n	800058c <EXTI_UPDATE+0x124>
	{

		EXTI->FTSR |=(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 8000574:	4b30      	ldr	r3, [pc, #192]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	8812      	ldrh	r2, [r2, #0]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000586:	430b      	orrs	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
 800058a:	e019      	b.n	80005c0 <EXTI_UPDATE+0x158>
	}
	else if(EXTI_config->trigger_case==EXIT_Falling_and_Rising  )
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7b1b      	ldrb	r3, [r3, #12]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d115      	bne.n	80005c0 <EXTI_UPDATE+0x158>
	{
		EXTI->RTSR |=(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <EXTI_UPDATE+0x1d0>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	8812      	ldrh	r2, [r2, #0]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	8812      	ldrh	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
	}
	//update IQR handling callback
	Gp_IRQ_Callback[EXTI_config->EXIT_Pin.EXTI_Line_Number]=EXTI_config->p_IRQ_Callback;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <EXTI_UPDATE+0x1d4>)
 80005cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//enable IQR in EXTI and NVIC
	if(EXTI_config->IRQ_define==EXIT_IRQ_enable)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7b5b      	ldrb	r3, [r3, #13]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d110      	bne.n	80005fa <EXTI_UPDATE+0x192>
	{
		EXTI->IMR|=(1<<EXTI_config->EXIT_Pin.EXTI_Line_Number);
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	4611      	mov	r1, r2
 80005e2:	2201      	movs	r2, #1
 80005e4:	408a      	lsls	r2, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
		enable_NVIC (EXTI_config->EXIT_Pin.EXTI_Line_Number);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe6c 	bl	80002d0 <enable_NVIC>

		EXTI->IMR &=~(1<< EXTI_config->EXIT_Pin.EXTI_Line_Number);
		disable_NVIC(EXTI_config->EXIT_Pin.EXTI_Line_Number);

	}
}
 80005f8:	e010      	b.n	800061c <EXTI_UPDATE+0x1b4>
		EXTI->IMR &=~(1<< EXTI_config->EXIT_Pin.EXTI_Line_Number);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <EXTI_UPDATE+0x1d0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	8812      	ldrh	r2, [r2, #0]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	43d2      	mvns	r2, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <EXTI_UPDATE+0x1d0>)
 800060e:	400b      	ands	r3, r1
 8000610:	6013      	str	r3, [r2, #0]
		disable_NVIC(EXTI_config->EXIT_Pin.EXTI_Line_Number);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fec0 	bl	800039c <disable_NVIC>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40010000 	.word	0x40010000
 8000628:	40010800 	.word	0x40010800
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40011000 	.word	0x40011000
 8000634:	40011400 	.word	0x40011400
 8000638:	40010400 	.word	0x40010400
 800063c:	20000034 	.word	0x20000034

08000640 <MCAL_EXTI_GPIO_INIT>:
 * Note                  - for stm32f103c6 use only GPIO port A  B C D but package 	LQFP48 has only A  B part of  C D
 *                       - ALSO not no open clock for AFIO and the GPIOX port
 * */

void MCAL_EXTI_GPIO_INIT(EXIT_Confing_t *EXTI_config)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]


	 EXTI_UPDATE( EXTI_config);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff0d 	bl	8000468 <EXTI_UPDATE>


}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <EXTI0_IRQHandler>:
//================================================================
//================== ISR Funcatiom================================
//================================================================

void EXTI0_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
EXTI->PR |=(1<<0);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI0_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI0_IRQHandler+0x1c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6153      	str	r3, [r2, #20]
Gp_IRQ_Callback[0]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI0_IRQHandler+0x20>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	20000034 	.word	0x20000034

0800067c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI1_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI1_IRQHandler+0x1c>)
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI1_IRQHandler+0x20>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	20000034 	.word	0x20000034

080006a0 <EXTI2_IRQHandler>:

 void EXTI2_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI2_IRQHandler+0x1c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI2_IRQHandler+0x1c>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI2_IRQHandler+0x20>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000034 	.word	0x20000034

080006c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <EXTI3_IRQHandler+0x1c>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <EXTI3_IRQHandler+0x1c>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <EXTI3_IRQHandler+0x20>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	4798      	blx	r3
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010400 	.word	0x40010400
 80006e4:	20000034 	.word	0x20000034

080006e8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <EXTI4_IRQHandler+0x1c>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <EXTI4_IRQHandler+0x1c>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <EXTI4_IRQHandler+0x20>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	4798      	blx	r3
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40010400 	.word	0x40010400
 8000708:	20000034 	.word	0x20000034

0800070c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	2b00      	cmp	r3, #0
 800071a:	d008      	beq.n	800072e <EXTI9_5_IRQHandler+0x22>
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6153      	str	r3, [r2, #20]
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <EXTI9_5_IRQHandler+0xa4>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <EXTI9_5_IRQHandler+0x40>
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <EXTI9_5_IRQHandler+0xa4>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <EXTI9_5_IRQHandler+0x5e>
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800075e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000762:	6153      	str	r3, [r2, #20]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <EXTI9_5_IRQHandler+0xa4>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	2b00      	cmp	r3, #0
 8000774:	d008      	beq.n	8000788 <EXTI9_5_IRQHandler+0x7c>
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <EXTI9_5_IRQHandler+0xa4>)
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <EXTI9_5_IRQHandler+0x9a>
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <EXTI9_5_IRQHandler+0xa0>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079e:	6153      	str	r3, [r2, #20]
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <EXTI9_5_IRQHandler+0xa4>)
 80007a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a4:	4798      	blx	r3
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010400 	.word	0x40010400
 80007b0:	20000034 	.word	0x20000034

080007b4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <EXTI15_10_IRQHandler+0x22>
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a29      	ldr	r2, [pc, #164]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6153      	str	r3, [r2, #20]
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 80007d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d4:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d008      	beq.n	80007f4 <EXTI15_10_IRQHandler+0x40>
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d008      	beq.n	8000812 <EXTI15_10_IRQHandler+0x5e>
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080a:	6153      	str	r3, [r2, #20]
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <EXTI15_10_IRQHandler+0x7c>
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082e:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <EXTI15_10_IRQHandler+0x9a>
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6153      	str	r3, [r2, #20]
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 800084a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084c:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <EXTI15_10_IRQHandler+0xb8>
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <EXTI15_10_IRQHandler+0xbc>)
 8000860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <EXTI15_10_IRQHandler+0xc0>)
 8000868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800086a:	4798      	blx	r3
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40010400 	.word	0x40010400
 8000874:	20000034 	.word	0x20000034

08000878 <git_pin_posation>:
 *  Created on: Jul 31, 2023
 *      Author: Ahmed shaban mohamed
 */
#include "stm32f103c6_GPIO_drivers.h"
uint8_t git_pin_posation( uint16_t gpio_pin_number)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	switch(gpio_pin_number)
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000888:	f000 80a5 	beq.w	80009d6 <git_pin_posation+0x15e>
 800088c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000890:	f300 80a3 	bgt.w	80009da <git_pin_posation+0x162>
 8000894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000898:	f000 809b 	beq.w	80009d2 <git_pin_posation+0x15a>
 800089c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008a0:	f300 809b 	bgt.w	80009da <git_pin_posation+0x162>
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a8:	f000 8091 	beq.w	80009ce <git_pin_posation+0x156>
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b0:	f300 8093 	bgt.w	80009da <git_pin_posation+0x162>
 80008b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b8:	f000 8087 	beq.w	80009ca <git_pin_posation+0x152>
 80008bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008c0:	f300 808b 	bgt.w	80009da <git_pin_posation+0x162>
 80008c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c8:	d07d      	beq.n	80009c6 <git_pin_posation+0x14e>
 80008ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ce:	f300 8084 	bgt.w	80009da <git_pin_posation+0x162>
 80008d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d6:	d074      	beq.n	80009c2 <git_pin_posation+0x14a>
 80008d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008dc:	dc7d      	bgt.n	80009da <git_pin_posation+0x162>
 80008de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e2:	d06c      	beq.n	80009be <git_pin_posation+0x146>
 80008e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e8:	dc77      	bgt.n	80009da <git_pin_posation+0x162>
 80008ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ee:	d064      	beq.n	80009ba <git_pin_posation+0x142>
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	dc71      	bgt.n	80009da <git_pin_posation+0x162>
 80008f6:	2b80      	cmp	r3, #128	; 0x80
 80008f8:	d05d      	beq.n	80009b6 <git_pin_posation+0x13e>
 80008fa:	2b80      	cmp	r3, #128	; 0x80
 80008fc:	dc6d      	bgt.n	80009da <git_pin_posation+0x162>
 80008fe:	2b20      	cmp	r3, #32
 8000900:	dc48      	bgt.n	8000994 <git_pin_posation+0x11c>
 8000902:	2b00      	cmp	r3, #0
 8000904:	dd69      	ble.n	80009da <git_pin_posation+0x162>
 8000906:	3b01      	subs	r3, #1
 8000908:	2b1f      	cmp	r3, #31
 800090a:	d866      	bhi.n	80009da <git_pin_posation+0x162>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <git_pin_posation+0x9c>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	0800099b 	.word	0x0800099b
 8000918:	0800099f 	.word	0x0800099f
 800091c:	080009db 	.word	0x080009db
 8000920:	080009a3 	.word	0x080009a3
 8000924:	080009db 	.word	0x080009db
 8000928:	080009db 	.word	0x080009db
 800092c:	080009db 	.word	0x080009db
 8000930:	080009a7 	.word	0x080009a7
 8000934:	080009db 	.word	0x080009db
 8000938:	080009db 	.word	0x080009db
 800093c:	080009db 	.word	0x080009db
 8000940:	080009db 	.word	0x080009db
 8000944:	080009db 	.word	0x080009db
 8000948:	080009db 	.word	0x080009db
 800094c:	080009db 	.word	0x080009db
 8000950:	080009ab 	.word	0x080009ab
 8000954:	080009db 	.word	0x080009db
 8000958:	080009db 	.word	0x080009db
 800095c:	080009db 	.word	0x080009db
 8000960:	080009db 	.word	0x080009db
 8000964:	080009db 	.word	0x080009db
 8000968:	080009db 	.word	0x080009db
 800096c:	080009db 	.word	0x080009db
 8000970:	080009db 	.word	0x080009db
 8000974:	080009db 	.word	0x080009db
 8000978:	080009db 	.word	0x080009db
 800097c:	080009db 	.word	0x080009db
 8000980:	080009db 	.word	0x080009db
 8000984:	080009db 	.word	0x080009db
 8000988:	080009db 	.word	0x080009db
 800098c:	080009db 	.word	0x080009db
 8000990:	080009af 	.word	0x080009af
 8000994:	2b40      	cmp	r3, #64	; 0x40
 8000996:	d00c      	beq.n	80009b2 <git_pin_posation+0x13a>

	case GPIO_PIN_15 :
		return 28;
		break;
	default :
		break ;
 8000998:	e01f      	b.n	80009da <git_pin_posation+0x162>
		return 0;
 800099a:	2300      	movs	r3, #0
 800099c:	e01f      	b.n	80009de <git_pin_posation+0x166>
		return 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	e01d      	b.n	80009de <git_pin_posation+0x166>
		return 8;
 80009a2:	2308      	movs	r3, #8
 80009a4:	e01b      	b.n	80009de <git_pin_posation+0x166>
		return 12;
 80009a6:	230c      	movs	r3, #12
 80009a8:	e019      	b.n	80009de <git_pin_posation+0x166>
		return 16;
 80009aa:	2310      	movs	r3, #16
 80009ac:	e017      	b.n	80009de <git_pin_posation+0x166>
		return 20;
 80009ae:	2314      	movs	r3, #20
 80009b0:	e015      	b.n	80009de <git_pin_posation+0x166>
		return 24;
 80009b2:	2318      	movs	r3, #24
 80009b4:	e013      	b.n	80009de <git_pin_posation+0x166>
		return 28;
 80009b6:	231c      	movs	r3, #28
 80009b8:	e011      	b.n	80009de <git_pin_posation+0x166>
		return 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e00f      	b.n	80009de <git_pin_posation+0x166>
		return 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	e00d      	b.n	80009de <git_pin_posation+0x166>
		return 8;
 80009c2:	2308      	movs	r3, #8
 80009c4:	e00b      	b.n	80009de <git_pin_posation+0x166>
		return 12;
 80009c6:	230c      	movs	r3, #12
 80009c8:	e009      	b.n	80009de <git_pin_posation+0x166>
		return 16;
 80009ca:	2310      	movs	r3, #16
 80009cc:	e007      	b.n	80009de <git_pin_posation+0x166>
		return 20;
 80009ce:	2314      	movs	r3, #20
 80009d0:	e005      	b.n	80009de <git_pin_posation+0x166>
		return 24;
 80009d2:	2318      	movs	r3, #24
 80009d4:	e003      	b.n	80009de <git_pin_posation+0x166>
		return 28;
 80009d6:	231c      	movs	r3, #28
 80009d8:	e001      	b.n	80009de <git_pin_posation+0x166>
		break ;
 80009da:	bf00      	nop

	}
	return 0;
 80009dc:	2300      	movs	r3, #0

}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <MCAL_GPIO_INIT>:
 * @retval               - null
 * Note                  -in STM32F103c6 mcu has gpio port A B C D but LQFP48 package hava only A and B and part OF C and  D
 */

void MCAL_GPIO_INIT(GPIO_typedef *GPIOX ,GPIO_pinconfig_t *pinconfig)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	//port configur register low (GPIO_CRL) configure  pins from 0 ti 7
	//port configur register high (GPIO_CRH) configure  pins from 8 ti 15
	volatile uint32_t *configregister =NULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
	uint8_t config=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
	configregister=(pinconfig->gpio_pin_number<GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH  ;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	2bff      	cmp	r3, #255	; 0xff
 8000a00:	d801      	bhi.n	8000a06 <MCAL_GPIO_INIT+0x1e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	e001      	b.n	8000a0a <MCAL_GPIO_INIT+0x22>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0] and  	M0DE y[1:0]
	(*configregister) &= ~(0xf<<git_pin_posation(pinconfig->gpio_pin_number));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff31 	bl	8000878 <git_pin_posation>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	401a      	ands	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	601a      	str	r2, [r3, #0]
	// if pin is output
	if(  (pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD) ||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP)||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP ))
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	2b07      	cmp	r3, #7
 8000a30:	d00b      	beq.n	8000a4a <MCAL_GPIO_INIT+0x62>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d007      	beq.n	8000a4a <MCAL_GPIO_INIT+0x62>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	789b      	ldrb	r3, [r3, #2]
 8000a3e:	2b05      	cmp	r3, #5
 8000a40:	d003      	beq.n	8000a4a <MCAL_GPIO_INIT+0x62>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d11c      	bne.n	8000a84 <MCAL_GPIO_INIT+0x9c>
	{
		//set CNFy[1:0] and M0DE y[1:0]
		config=((((pinconfig->GPIO_MODE - 4)<<2)|pinconfig->GPIO_OUTPUT_SPEED)&0X0f) ;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	b25a      	sxtb	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	73fb      	strb	r3, [r7, #15]
		(*configregister)|=((config)<<(git_pin_posation(pinconfig->gpio_pin_number)));
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff03 	bl	8000878 <git_pin_posation>
 8000a72:	4603      	mov	r3, r0
 8000a74:	fa04 f203 	lsl.w	r2, r4, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e056      	b.n	8000b32 <MCAL_GPIO_INIT+0x14a>

	}
	else
	{
		if(  (pinconfig->GPIO_MODE==GPIO_MODE_INPUT_FLO) ||(pinconfig->GPIO_MODE==GPIO_MODE_Analog))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <MCAL_GPIO_INIT+0xac>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d115      	bne.n	8000ac0 <MCAL_GPIO_INIT+0xd8>
		{
			//set CNFy[1:0] and M0DE y[1:0]
			config=(((pinconfig->GPIO_MODE <<2)| 0X0) & 0X0F) ;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	73fb      	strb	r3, [r7, #15]
				(*configregister)|=((config)<<(git_pin_posation(pinconfig->gpio_pin_number)));
 8000aa2:	7bfc      	ldrb	r4, [r7, #15]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fee5 	bl	8000878 <git_pin_posation>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	fa04 f203 	lsl.w	r2, r4, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	e038      	b.n	8000b32 <MCAL_GPIO_INIT+0x14a>

		}
		else if  (pinconfig->GPIO_MODE==GPIO_MODE_INPUT_AF )
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d110      	bne.n	8000aea <MCAL_GPIO_INIT+0x102>
		{
			config=(((GPIO_MODE_INPUT_AF<<2)|0x0)&0x0f);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
			(*configregister)|=((config)<<(git_pin_posation(pinconfig->gpio_pin_number)));
 8000acc:	7bfc      	ldrb	r4, [r7, #15]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fed0 	bl	8000878 <git_pin_posation>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	fa04 f203 	lsl.w	r2, r4, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e023      	b.n	8000b32 <MCAL_GPIO_INIT+0x14a>

		}
		else
		{
			config=(((GPIO_MODE_INPUT_PU<<2)|0x0)&0x0f);
 8000aea:	2308      	movs	r3, #8
 8000aec:	73fb      	strb	r3, [r7, #15]
			(*configregister) |= (  (  config  ) << ( git_pin_posation( pinconfig->gpio_pin_number) ) ) ;
 8000aee:	7bfc      	ldrb	r4, [r7, #15]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff febf 	bl	8000878 <git_pin_posation>
 8000afa:	4603      	mov	r3, r0
 8000afc:	fa04 f203 	lsl.w	r2, r4, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	601a      	str	r2, [r3, #0]

			if(pinconfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d107      	bne.n	8000b22 <MCAL_GPIO_INIT+0x13a>
			{
				GPIOX->ODR |= pinconfig->gpio_pin_number;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	e007      	b.n	8000b32 <MCAL_GPIO_INIT+0x14a>
			}
			else
			{
				GPIOX->ODR &=~( pinconfig->gpio_pin_number);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	8812      	ldrh	r2, [r2, #0]
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60da      	str	r2, [r3, #12]

			}
		}
	}
	//write or read to CL or CRH
	(*configregister)|=((config)<<git_pin_posation(pinconfig->gpio_pin_number));
 8000b32:	7bfc      	ldrb	r4, [r7, #15]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe9d 	bl	8000878 <git_pin_posation>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	fa04 f203 	lsl.w	r2, r4, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
	...

08000b58 <SPI1_IRQHandler>:
	//===================IRQ==============================================
	//====================================================================

}
void SPI1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	struct intrput_src  irq_src;
	irq_src.RXNE=  ((SPI1->SPI_SR &(1<<0)) >>0);
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	793b      	ldrb	r3, [r7, #4]
 8000b6a:	f362 0300 	bfi	r3, r2, #0, #1
 8000b6e:	713b      	strb	r3, [r7, #4]
	irq_src.TXE=   ((SPI1->SPI_SR &(1<<1)) >>1);
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b82:	713b      	strb	r3, [r7, #4]
	irq_src.CHSIDE=((SPI1->SPI_SR &(1<<2)) >>2);
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	793b      	ldrb	r3, [r7, #4]
 8000b92:	f362 0382 	bfi	r3, r2, #2, #1
 8000b96:	713b      	strb	r3, [r7, #4]
	irq_src.UDR=   ((SPI1->SPI_SR &(1<<3)) >>3);
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	793b      	ldrb	r3, [r7, #4]
 8000ba6:	f362 03c3 	bfi	r3, r2, #3, #1
 8000baa:	713b      	strb	r3, [r7, #4]
	irq_src.CRCERR=((SPI1->SPI_SR &(1<<4)) >>4);
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	793b      	ldrb	r3, [r7, #4]
 8000bba:	f362 1304 	bfi	r3, r2, #4, #1
 8000bbe:	713b      	strb	r3, [r7, #4]
	irq_src.MODF=  ((SPI1->SPI_SR &(1<<5)) >>5);
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	793b      	ldrb	r3, [r7, #4]
 8000bce:	f362 1345 	bfi	r3, r2, #5, #1
 8000bd2:	713b      	strb	r3, [r7, #4]
	irq_src.OVR=   ((SPI1->SPI_SR &(1<<6)) >>6);
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	f362 1386 	bfi	r3, r2, #6, #1
 8000be6:	713b      	strb	r3, [r7, #4]
	irq_src.BSY=   ((SPI1->SPI_SR&(1<<7)) >>7);
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <SPI1_IRQHandler+0xb8>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	09db      	lsrs	r3, r3, #7
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	f362 13c7 	bfi	r3, r2, #7, #1
 8000bfa:	713b      	strb	r3, [r7, #4]

	GP_SPI[SPI1_index]->p_IQR_callback(irq_src);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SPI1_IRQHandler+0xbc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	7938      	ldrb	r0, [r7, #4]
 8000c04:	4798      	blx	r3


}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	20000020 	.word	0x20000020

08000c18 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

	struct intrput_src  irq_src;
	irq_src.RXNE=  ((SPI2->SPI_SR &(1<<0)) >>0);
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	793b      	ldrb	r3, [r7, #4]
 8000c2a:	f362 0300 	bfi	r3, r2, #0, #1
 8000c2e:	713b      	strb	r3, [r7, #4]
	irq_src.TXE=   ((SPI2->SPI_SR &(1<<1)) >>1);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	085b      	lsrs	r3, r3, #1
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	793b      	ldrb	r3, [r7, #4]
 8000c3e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c42:	713b      	strb	r3, [r7, #4]
	irq_src.CHSIDE=((SPI2->SPI_SR &(1<<2)) >>2);
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	f362 0382 	bfi	r3, r2, #2, #1
 8000c56:	713b      	strb	r3, [r7, #4]
	irq_src.UDR=   ((SPI2->SPI_SR &(1<<3)) >>3);
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	793b      	ldrb	r3, [r7, #4]
 8000c66:	f362 03c3 	bfi	r3, r2, #3, #1
 8000c6a:	713b      	strb	r3, [r7, #4]
	irq_src.CRCERR=((SPI2->SPI_SR &(1<<4)) >>4);
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	793b      	ldrb	r3, [r7, #4]
 8000c7a:	f362 1304 	bfi	r3, r2, #4, #1
 8000c7e:	713b      	strb	r3, [r7, #4]
	irq_src.MODF=  ((SPI2->SPI_SR &(1<<5)) >>5);
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	793b      	ldrb	r3, [r7, #4]
 8000c8e:	f362 1345 	bfi	r3, r2, #5, #1
 8000c92:	713b      	strb	r3, [r7, #4]
	irq_src.OVR=   ((SPI2->SPI_SR &(1<<6)) >>6);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	099b      	lsrs	r3, r3, #6
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	f362 1386 	bfi	r3, r2, #6, #1
 8000ca6:	713b      	strb	r3, [r7, #4]
	irq_src.BSY=   ((SPI2->SPI_SR&(1<<7)) >>7);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <SPI2_IRQHandler+0xb8>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	09db      	lsrs	r3, r3, #7
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	793b      	ldrb	r3, [r7, #4]
 8000cb6:	f362 13c7 	bfi	r3, r2, #7, #1
 8000cba:	713b      	strb	r3, [r7, #4]

	GP_SPI[SPI2_index]->p_IQR_callback(irq_src);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SPI2_IRQHandler+0xbc>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	7938      	ldrb	r0, [r7, #4]
 8000cc4:	4798      	blx	r3

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	20000020 	.word	0x20000020

08000cd8 <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	GL_USART_configs[0]->P_IRQ_callback();
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <USART1_IRQHandler+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	4798      	blx	r3

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000028 	.word	0x20000028

08000cec <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	GL_USART_configs[1]->P_IRQ_callback();
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <USART2_IRQHandler+0x10>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	4798      	blx	r3

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000028 	.word	0x20000028

08000d00 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	GL_USART_configs[2]->P_IRQ_callback();
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <USART3_IRQHandler+0x10>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4798      	blx	r3

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000028 	.word	0x20000028

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	2600      	movs	r6, #0
 8000d18:	4d0c      	ldr	r5, [pc, #48]	; (8000d4c <__libc_init_array+0x38>)
 8000d1a:	4c0d      	ldr	r4, [pc, #52]	; (8000d50 <__libc_init_array+0x3c>)
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	42a6      	cmp	r6, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	f000 f81a 	bl	8000d5c <_init>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	4d0a      	ldr	r5, [pc, #40]	; (8000d54 <__libc_init_array+0x40>)
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <__libc_init_array+0x44>)
 8000d2e:	1b64      	subs	r4, r4, r5
 8000d30:	10a4      	asrs	r4, r4, #2
 8000d32:	42a6      	cmp	r6, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3c:	4798      	blx	r3
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d46:	4798      	blx	r3
 8000d48:	3601      	adds	r6, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000d80 	.word	0x08000d80
 8000d50:	08000d80 	.word	0x08000d80
 8000d54:	08000d80 	.word	0x08000d80
 8000d58:	08000d84 	.word	0x08000d84

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
