
ATMEGA_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000002b0  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d14  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000826  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b4  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000531  00000000  00000000  00002636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  7a:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_check_lcd_isbusy>:
			count = 0;
		}
	}
}
void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<shift);
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<4);
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	80 6f       	ori	r24, 0xF0	; 240
  b6:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <LCD_WRITE_COMMAND>:
void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}
void LCD_WRITE_COMMAND(unsigned char command){
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	//LCD_check_lcd_isbusy();
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_PORT = command; // put the command  at port-A
  c8:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));  //  make portB select command and at read mode
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	89 7f       	andi	r24, 0xF9	; 249
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_WRITE_COMMAND+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_WRITE_COMMAND+0x1a>
  da:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_GOTO_XY>:
 */


#include "lcd.h"

void LCD_GOTO_XY(unsigned char line, unsigned char position){
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c8 2f       	mov	r28, r24
  ea:	d6 2f       	mov	r29, r22
	if (line == 1)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	31 f4       	brne	.+12     	; 0xfc <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
  f0:	60 31       	cpi	r22, 0x10	; 16
  f2:	20 f4       	brcc	.+8      	; 0xfc <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	86 0f       	add	r24, r22
  f8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
  fc:	c2 30       	cpi	r28, 0x02	; 2
  fe:	31 f4       	brne	.+12     	; 0x10c <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 100:	d0 31       	cpi	r29, 0x10	; 16
 102:	20 f4       	brcc	.+8      	; 0x10c <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	8d 0f       	add	r24, r29
 108:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		}
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <LCD_clear_screen>:
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 118:	08 95       	ret

0000011a <LCD_INIT>:
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	93 e1       	ldi	r25, 0x13	; 19
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_INIT+0x4>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_INIT+0xa>
 124:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(20);
    //LCD_check_lcd_isbusy();
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH); // DDRB   (enable the register , send data , read mode)
 126:	87 b3       	in	r24, 0x17	; 23
 128:	8e 60       	ori	r24, 0x0E	; 14
 12a:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);      // PORTB   (disable the register  , send command , write mode)
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	81 7f       	andi	r24, 0xF1	; 241
 130:	88 bb       	out	0x18, r24	; 24
	
	DataDir_LCD_PORT = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
 136:	85 ea       	ldi	r24, 0xA5	; 165
 138:	9e e0       	ldi	r25, 0x0E	; 14
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_INIT+0x20>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_INIT+0x26>
 140:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen(); 
 142:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	//LCD_WRITE_COMMAND(0x02);
	
	#endif
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 15e:	08 95       	ret

00000160 <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
void LCD_WRITE_CHAR(unsigned char character){
 160:	cf 93       	push	r28
 162:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 164:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_PORT = character;
 168:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1 << RW_SWITCH);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL |= (1 << RS_SWITCH);
 170:	88 b3       	in	r24, 0x18	; 24
 172:	82 60       	ori	r24, 0x02	; 2
 174:	88 bb       	out	0x18, r24	; 24
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_WRITE_CHAR+0x1a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_WRITE_CHAR+0x20>
 180:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 182:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	_delay_ms(1);
	LCD_lcd_kick ();
	#endif
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
	int count = 0;
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 198:	18 c0       	rjmp	.+48     	; 0x1ca <LCD_WRITE_STRING+0x40>
		count++;
 19a:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_WRITE_CHAR>
		if (count == 16)
 1a4:	c0 31       	cpi	r28, 0x10	; 16
 1a6:	d1 05       	cpc	r29, r1
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_GOTO_XY>
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 1b4:	c0 32       	cpi	r28, 0x20	; 32
 1b6:	d1 05       	cpc	r29, r1
 1b8:	41 f4       	brne	.+16     	; 0x1ca <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 1ba:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_GOTO_XY>
			count = 0;
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	e4 cf       	rjmp	.-56     	; 0x19a <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <main>:
int main(void)

{
	char arr[30]="ahmed";
	
	LCD_INIT();
 1dc:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_INIT>
	LCD_clear_screen();
 1e0:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear_screen>
	LCD_WRITE_STRING("LCD  init");
 1e4:	80 e6       	ldi	r24, 0x60	; 96
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
 1ec:	2f e3       	ldi	r18, 0x3F	; 63
 1ee:	82 e4       	ldi	r24, 0x42	; 66
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x16>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x20>
 1fc:	00 00       	nop
	_delay_ms(5000);
	LCD_clear_screen();
 1fe:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear_screen>
	UART_INIT();
 202:	0e 94 23 01 	call	0x246	; 0x246 <UART_INIT>
		LCD_WRITE_STRING("uart  init");
 206:	8a e6       	ldi	r24, 0x6A	; 106
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
 20e:	2f e3       	ldi	r18, 0x3F	; 63
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	9f e0       	ldi	r25, 0x0F	; 15
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x38>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x42>
 21e:	00 00       	nop
		_delay_ms(5000);
		LCD_clear_screen();
 220:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear_screen>
		UART_SendString("AHMED shaban mohamed");
 224:	85 e7       	ldi	r24, 0x75	; 117
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 49 01 	call	0x292	; 0x292 <UART_SendString>

	
		
 uint8_t x;
 LCD_WRITE_STRING("UART RX");
 22c:	8a e8       	ldi	r24, 0x8A	; 138
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
 
 LCD_GOTO_XY(2,0);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_GOTO_XY>
    while (1) 
    { 

		
	x=UART_RESIVED();
 23c:	0e 94 45 01 	call	0x28a	; 0x28a <UART_RESIVED>
	LCD_WRITE_CHAR(x);
 240:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_WRITE_CHAR>
 244:	fb cf       	rjmp	.-10     	; 0x23c <main+0x60>

00000246 <UART_INIT>:
	
	
	

//init boud rate
CLR_BIT(UCSRA,U2X);
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	8d 7f       	andi	r24, 0xFD	; 253
 24a:	8b b9       	out	0x0b, r24	; 11
UBRRL=51;
 24c:	83 e3       	ldi	r24, 0x33	; 51
 24e:	89 b9       	out	0x09, r24	; 9
	
//init tx and rx
SET_BIT(UCSRB,RXEN)	;
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 61       	ori	r24, 0x10	; 16
 254:	8a b9       	out	0x0a, r24	; 10
SET_BIT(UCSRB,TXEN);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	8a b9       	out	0x0a, r24	; 10
//init fram

    //parity bit	

	#ifdef  Even_Parity
	CLR_BIT(UCSRC,UPM0);
 25c:	80 b5       	in	r24, 0x20	; 32
 25e:	8f 7e       	andi	r24, 0xEF	; 239
 260:	80 bd       	out	0x20, r24	; 32
	SET_BIT( UCSRC,UPM1);
 262:	80 b5       	in	r24, 0x20	; 32
 264:	80 62       	ori	r24, 0x20	; 32
 266:	80 bd       	out	0x20, r24	; 32
//stop bit
   #ifdef  one_stop_bit
   CLR_BIT(UCSRC,USBS);
    #endif
 #ifdef two_stop_bit
 SET_BIT(UCSRC,USBS);  
 268:	80 b5       	in	r24, 0x20	; 32
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	80 bd       	out	0x20, r24	; 32
//Data  size
switch(frame_size)
{
	case 5:

	CLR_BIT(UCSRC,UCSZ0);
 26e:	80 b5       	in	r24, 0x20	; 32
 270:	8d 7f       	andi	r24, 0xFD	; 253
 272:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UCSZ1);
 274:	80 b5       	in	r24, 0x20	; 32
 276:	8b 7f       	andi	r24, 0xFB	; 251
 278:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRB,UCSZ2);
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	8a b9       	out	0x0a, r24	; 10
 280:	08 95       	ret

00000282 <UART_SEND_char>:
	
}
void UART_SEND_char(uint8_t data)
{
//check if the buffer is empety or not
while(! GET_BIT(UCSRA,UDRE));
 282:	5d 9b       	sbis	0x0b, 5	; 11
 284:	fe cf       	rjmp	.-4      	; 0x282 <UART_SEND_char>
UDR=data;
 286:	8c b9       	out	0x0c, r24	; 12
 288:	08 95       	ret

0000028a <UART_RESIVED>:
	
}

uint8_t UART_RESIVED (void)
{
while(! GET_BIT(UCSRA,RXC));
 28a:	5f 9b       	sbis	0x0b, 7	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <UART_RESIVED>

return UDR;
 28e:	8c b1       	in	r24, 0x0c	; 12
	
}
 290:	08 95       	ret

00000292 <UART_SendString>:
void UART_SendString(const char* str) {
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	while (*str != '\0') {
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <UART_SendString+0xe>
		UART_SEND_char(*str);
 29a:	0e 94 41 01 	call	0x282	; 0x282 <UART_SEND_char>
		str++;
 29e:	21 96       	adiw	r28, 0x01	; 1

return UDR;
	
}
void UART_SendString(const char* str) {
	while (*str != '\0') {
 2a0:	88 81       	ld	r24, Y
 2a2:	81 11       	cpse	r24, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <UART_SendString+0x8>
		UART_SEND_char(*str);
		str++;
	}
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
