
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066c  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <master_init>:


{ 
	
		//configer as master
	SPCR|= 1<<MSTR;
  6c:	8d b1       	in	r24, 0x0d	; 13
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	8d b9       	out	0x0d, r24	; 13
	   // slave select and clock and master output slave input  is output
	DDRB|=(1<<ss)|(1<<CLK) |(1<<MOSI);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 6b       	ori	r24, 0xB0	; 176
  76:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	87 bb       	out	0x17, r24	; 23
	
	//enable SPI
	SPCR|= 1<<SPE ;
  7e:	8d b1       	in	r24, 0x0d	; 13
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8d b9       	out	0x0d, r24	; 13

	//clock rate	
	SPCR|=1<< SPR0;	
  84:	8d b1       	in	r24, 0x0d	; 13
  86:	81 60       	ori	r24, 0x01	; 1
  88:	8d b9       	out	0x0d, r24	; 13
	SPCR&=~(1<< SPR1);	
  8a:	8d b1       	in	r24, 0x0d	; 13
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8d b9       	out	0x0d, r24	; 13
  90:	08 95       	ret

00000092 <master_send_data>:
}
uint8_t master_send_data(uint8_t data)
{
	SPDR= data;
  92:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <master_send_data+0x2>
	return SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
	
}
  9a:	08 95       	ret

0000009c <main>:



int main(void)
{
  master_init();
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <master_init>
  DDRA=0xff;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a bb       	out	0x1a, r24	; 26
  for( unsigned char data=0 ;data <=255;data++)
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  {
	  PORTA=master_send_data(data);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 49 00 	call	0x92	; 0x92 <master_send_data>
  ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f e3       	ldi	r18, 0x3F	; 63
  b0:	8d e0       	ldi	r24, 0x0D	; 13
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x18>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x22>
  be:	00 00       	nop

int main(void)
{
  master_init();
  DDRA=0xff;
  for( unsigned char data=0 ;data <=255;data++)
  c0:	cf 5f       	subi	r28, 0xFF	; 255
  c2:	f1 cf       	rjmp	.-30     	; 0xa6 <main+0xa>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
