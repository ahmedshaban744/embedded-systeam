
MAX7219 with spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000fe  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  7a:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_MasterInit>:
char  arr[7]={2,2,7,2,0,0,1};

void SPI_MasterInit()
{
	/* Set MOSI, SCK and SS output*/
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6b       	ori	r24, 0xB0	; 176
  86:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << MSTR) | (1 << SPE) | (1 << SPR0);
  88:	8d b1       	in	r24, 0x0d	; 13
  8a:	81 65       	ori	r24, 0x51	; 81
  8c:	8d b9       	out	0x0d, r24	; 13
  8e:	08 95       	ret

00000090 <MUX>:
}
void MUX(uint8_t command , uint8_t data)
{// make ss  logic 0 to start 
	PORTB &= ~(1 << SS);
  90:	98 b3       	in	r25, 0x18	; 24
  92:	9f 7e       	andi	r25, 0xEF	; 239
  94:	98 bb       	out	0x18, r25	; 24
	SPDR=command ;
  96:	8f b9       	out	0x0f, r24	; 15
	//polling in the flag to ensure that command is send
	while (!(SPSR &(1<<SPIF)));
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <MUX+0x8>
	SPDR=data ;
  9c:	6f b9       	out	0x0f, r22	; 15
	//polling in the flag to ensure that data is send
	while (!(SPSR &(1<<SPIF)));
  9e:	77 9b       	sbis	0x0e, 7	; 14
  a0:	fe cf       	rjmp	.-4      	; 0x9e <MUX+0xe>
	//make slave selact hight to stop
	PORTB = (1 << SS);	
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
	char index_display ;
	char counter=0;
    SPI_MasterInit();
  a8:	0e 94 41 00 	call	0x82	; 0x82 <SPI_MasterInit>
	// Shutdown Register Format (
	// normal mode
	MUX(0x0C,0x01);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	0e 94 48 00 	call	0x90	; 0x90 <MUX>
	//Decode-Mode Register
	//Code B decode for digits 7–0
	MUX(0x09,0xFF);
  b4:	6f ef       	ldi	r22, 0xFF	; 255
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	0e 94 48 00 	call	0x90	; 0x90 <MUX>
	// Intensity Register Format
	//max  Intensity
	MUX(0x0A,0xFF);
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	0e 94 48 00 	call	0x90	; 0x90 <MUX>
	//. Scan-Limit Register Format (
	//Display digits 0 1 2 3 4 5 6 7
	MUX(0x0B,0x06);
  c4:	66 e0       	ldi	r22, 0x06	; 6
  c6:	8b e0       	ldi	r24, 0x0B	; 11
  c8:	0e 94 48 00 	call	0x90	; 0x90 <MUX>
 static uint8_t x=1;
		/*SPDR=0X1F ;*/
    while (1) 
    {
				
				for (index_display =0; index_display <= 7; index_display++)
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <main+0x4c>
				{
				MUX( index_display ,arr[index_display-1]);
  d0:	ec 2f       	mov	r30, r28
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e1 5a       	subi	r30, 0xA1	; 161
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	60 81       	ld	r22, Z
  da:	8c 2f       	mov	r24, r28
  dc:	0e 94 48 00 	call	0x90	; 0x90 <MUX>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	80 e7       	ldi	r24, 0x70	; 112
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x3e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x48>
  f0:	00 00       	nop
 static uint8_t x=1;
		/*SPDR=0X1F ;*/
    while (1) 
    {
				
				for (index_display =0; index_display <= 7; index_display++)
  f2:	cf 5f       	subi	r28, 0xFF	; 255
  f4:	c8 30       	cpi	r28, 0x08	; 8
  f6:	60 f3       	brcs	.-40     	; 0xd0 <main+0x28>
  f8:	e9 cf       	rjmp	.-46     	; 0xcc <main+0x24>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
