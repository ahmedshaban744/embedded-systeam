
avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803000  00803000  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002498  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021d3  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00004c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000107f  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00005d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00005f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  a0:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <IO_Init>:
}

void IO_Init()
{
	//All LEDs pins as output
	IO_DDRD |= (1<<7);
  a8:	81 b7       	in	r24, 0x31	; 49
  aa:	92 b7       	in	r25, 0x32	; 50
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	81 bf       	out	0x31, r24	; 49
  b0:	92 bf       	out	0x32, r25	; 50
	IO_DDRD |= (1<<6);
  b2:	81 b7       	in	r24, 0x31	; 49
  b4:	92 b7       	in	r25, 0x32	; 50
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	81 bf       	out	0x31, r24	; 49
  ba:	92 bf       	out	0x32, r25	; 50
	IO_DDRD |= (1<<5);
  bc:	81 b7       	in	r24, 0x31	; 49
  be:	92 b7       	in	r25, 0x32	; 50
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	81 bf       	out	0x31, r24	; 49
  c4:	92 bf       	out	0x32, r25	; 50
  c6:	08 95       	ret

000000c8 <INT_Init>:
void INT_Init()
{

	
	//Set INIT0 as logical change generates an interrupt request.
	MCUCR |=  (0b01<<0);
  c8:	e5 e5       	ldi	r30, 0x55	; 85
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
  d4:	91 83       	std	Z+1, r25	; 0x01


	//Set INIT1 as The rising edge.
	MCUCR |=  (0b11<<2);
  d6:	80 81       	ld	r24, Z
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	8c 60       	ori	r24, 0x0C	; 12
  dc:	80 83       	st	Z, r24
  de:	91 83       	std	Z+1, r25	; 0x01

	
	//Set INIT1 as The falling edge.
   MCUCSR &= ~(1<<6);
  e0:	e4 e5       	ldi	r30, 0x54	; 84
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	80 83       	st	Z, r24
  ec:	91 83       	std	Z+1, r25	; 0x01
	
	//Enable all interrupts
	GICR |= (1<<5);
  ee:	eb e5       	ldi	r30, 0x5B	; 91
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
  fa:	91 83       	std	Z+1, r25	; 0x01
	GICR |= (1<<6);
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	91 83       	std	Z+1, r25	; 0x01
	GICR |= (1<<7);
 106:	80 81       	ld	r24, Z
 108:	91 81       	ldd	r25, Z+1	; 0x01
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
 10e:	91 83       	std	Z+1, r25	; 0x01
	
	//To enable Global interrupt
	sei();
 110:	78 94       	sei
 112:	08 95       	ret

00000114 <main>:
void IO_Init();
void INT_Init();

int main(void)
{
	IO_Init();
 114:	0e 94 54 00 	call	0xa8	; 0xa8 <IO_Init>
	INT_Init();
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <INT_Init>
	while(1)
	{
		//Turn LEDs off
		IO_PORTD &= ~(1<<5);
 11c:	82 b7       	in	r24, 0x32	; 50
 11e:	93 b7       	in	r25, 0x33	; 51
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	82 bf       	out	0x32, r24	; 50
 124:	93 bf       	out	0x33, r25	; 51
		IO_PORTD &= ~(1<<6);
 126:	82 b7       	in	r24, 0x32	; 50
 128:	93 b7       	in	r25, 0x33	; 51
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	82 bf       	out	0x32, r24	; 50
 12e:	93 bf       	out	0x33, r25	; 51
		IO_PORTD &= ~(1<<7);
 130:	82 b7       	in	r24, 0x32	; 50
 132:	93 b7       	in	r25, 0x33	; 51
 134:	8f 77       	andi	r24, 0x7F	; 127
 136:	82 bf       	out	0x32, r24	; 50
 138:	93 bf       	out	0x33, r25	; 51
 13a:	f0 cf       	rjmp	.-32     	; 0x11c <main+0x8>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
